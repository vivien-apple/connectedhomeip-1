{{> header}}

#ifndef CHIP_CLUSTERS_H
#define CHIP_CLUSTERS_H

#import <Foundation/Foundation.h>
#include <stdbool.h>

// Global Response Handlers
typedef void (^DefaultSuccessHandler)(void);
typedef void (^DefaultFailureHandler)(uint8_t status);
typedef void (^BooleanAttributeHandler)(bool value);
typedef void (^Int8uAttributeHandler)(uint8_t value);
typedef void (^Int8sAttributeHandler)(int8_t value);
typedef void (^Int16uAttributeHandler)(uint16_t value);
typedef void (^Int16sAttributeHandler)(int16_t value);
typedef void (^Int32uAttributeHandler)(uint32_t value);
typedef void (^Int32sAttributeHandler)(int32_t value);
typedef void (^Int64uAttributeHandler)(uint64_t value);
typedef void (^Int64sAttributeHandler)(int64_t value);
typedef void (^ReadReportingConfigurationReportedHandler)(uint16_t minInterval, uint16_t maxInterval);
typedef void (^ReadReportingConfigurationReceivedHandler)(uint16_t timeout);

// Cluster Specific Response Handlers
{{#all_user_clusters}}
{{#if (isClient side) }}
{{#if (user_cluster_has_enabled_command name side)}}
{{#all_user_cluster_commands}}
{{#if (isStrEqual clusterName parent.name)}}
{{#if (isCommandAvailable parent.side incoming outgoing commandSource name)}}
typedef void (^{{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}Handler)({{#zcl_command_arguments}}{{#unless (isStrEqual label "status")}}{{asUnderlyingZclType type}} {{asSymbol label}}{{#unless (isLastElement index count)}}, {{/unless}}{{/unless}}{{/zcl_command_arguments}});
{{/if}}
{{/if}}
{{/all_user_cluster_commands}}
{{/if}}
{{/if}}
{{/all_user_clusters}}

// This is a temporary workarounds for attributes that are not correctly handled yet.
typedef void (^UnsupportedAttributeHandler)(void);

@class CHIPDevice;

{{#chip_clusters}}

NS_ASSUME_NONNULL_BEGIN

@interface CHIP{{asCamelCased name false}} : NSObject

- (nullable instancetype)initWithDevice:(CHIPDevice *)device endpoint:(uint8_t)endpoint queue:(dispatch_queue_t)queue;
{{#chip_server_cluster_commands}}
{{#if (hasSpecificResponse name)}}
- (BOOL){{asCamelCased name}}:({{asCamelCased parent.name false}}Cluster{{asCamelCased name false}}ResponseHandler)onSuccessCallback onFailureCallback:(DefaultFailureHandler)onFailureCallback{{#chip_server_cluster_command_arguments}} {{asCamelCased label}}:({{asBasicType chipType}}){{asCamelCased label}}{{/chip_server_cluster_command_arguments}};
{{else}}
- (BOOL){{asCamelCased name}}:(DefaultSuccessHandler)onSuccessCallback onFailureCallback:(DefaultFailureHandler)onFailureCallback{{#chip_server_cluster_command_arguments}} {{asCamelCased label}}:({{asBasicType chipType}}){{asCamelCased label}}{{/chip_server_cluster_command_arguments}};
{{/if}}
{{/chip_server_cluster_commands}}

{{#chip_server_cluster_attributes}}
- (BOOL)readAttribute{{asCamelCased name false}}:({{asCallbackAttributeType atomicTypeId}}AttributeHandler)onSuccessCallback onFailureCallback:(DefaultFailureHandler)onFailureCallback;
{{#if (isWritableAttribute)}}
- (BOOL)writeAttribute{{asCamelCased name false}}:(DefaultSuccessHandler)onSuccessCallback onFailureCallback:(DefaultFailureHandler)onFailureCallback value:({{asUnderlyingZclType type}})value;
{{/if}}
{{#if (isReportableAttribute)}}
- (BOOL) reportAttribute{{asCamelCased name false}}:(DefaultSuccessHandler)onSuccessCallback onFailureCallback:(DefaultFailureHandler)onFailureCallback onReportCallback:({{asCallbackAttributeType atomicTypeId}}AttributeHandler)onReportCallback minInterval:(uint16_t)minInterval  maxInterval:(uint16_t)maxInterval{{#unless (isDiscreteType)}} change:({{chipType}})change{{/unless}};
{{/if}}
{{/chip_server_cluster_attributes}}

- (instancetype)init NS_UNAVAILABLE;
+ (instancetype)new NS_UNAVAILABLE;

@end

NS_ASSUME_NONNULL_END
{{/chip_clusters}}

#endif /* CHIP_CLUSTERS_H */
