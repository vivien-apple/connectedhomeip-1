/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <commands/clusters/ModelCommandLogger.h>

#include <string>

#include <app-common/zap-generated/cluster-objects.h>
#include <app/data-model/DecodableList.h>
#include <lib/support/BytesToHex.h>

using namespace chip::app::Clusters;

#if CHIP_PROGRESS_LOGGING
std::string IndentStr(size_t indent)
{
    std::string str;
    for (size_t i = 0; i < indent; ++i)
    {
        str.append("  ");
    }
    return str;
}
#endif // CHIP_PROGRESS_LOGGING

// We output helpers for all structs here, including ones we might not actually
// be logging.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::detail::Structs::LabelStruct::DecodableType & value);

CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Scenes::Structs::SceneExtensionFieldSet::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::PowerProfileRecord::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::ScheduledPhase::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::TransferredPhase::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::Target::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::AccessControlEntry::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::ExtensionEntry::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Events::StateChanged::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Events::ActionFailed::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::StartUp::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::ShutDown::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::Leave::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Basic::Events::ReachableChanged::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::StateTransition::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::VersionApplied::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::DownloadError::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::ThreadInterfaceScanResult::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::WiFiInterfaceScanResult::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::GeneralDiagnostics::Events::HardwareFaultChange::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::GeneralDiagnostics::Events::RadioFaultChange::DecodableType> & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::GeneralDiagnostics::Events::NetworkFaultChange::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Events::BootReason::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::SoftwareDiagnostics::Structs::SoftwareFaultStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::SoftwareDiagnostics::Events::SoftwareFault::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::ThreadNetworkDiagnostics::Events::ConnectionStatus::DecodableType> & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::WiFiNetworkDiagnostics::Events::Disconnection::DecodableType> & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::WiFiNetworkDiagnostics::Events::AssociationFailure::DecodableType> & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::Optional<chip::app::Clusters::WiFiNetworkDiagnostics::Events::ConnectionStatus::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::SwitchLatched::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::InitialPress::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::LongPress::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::ShortRelease::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::LongRelease::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::MultiPressOngoing::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::Switch::Events::MultiPressComplete::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupKeySet::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BooleanState::Events::StateChange::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ModeSelect::Structs::SemanticTag::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Structs::DlCredential::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::DoorLockAlarm::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::Optional<chip::app::Clusters::DoorLock::Events::DoorStateChange::DecodableType> & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockOperation::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockOperationError::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockUserChange::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageLow::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageHigh::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PowerMissingPhase::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureLow::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureHigh::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::DryRunning::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::MotorTemperatureHigh::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PumpMotorFatalFailure::DecodableType & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicTemperatureHigh::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PumpBlocked::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SensorFailure::DecodableType & value);
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicNonFatalFailure::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicFatalFailure::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::GeneralFault::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::Leakage::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::AirDetection::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::TurbineOperation::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::IasAce::Structs::IasAceZoneStatusResult::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Channel::Structs::ChannelInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Channel::Structs::LineupInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TargetNavigator::Structs::TargetInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::MediaPlayback::Structs::PlaybackPosition::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::MediaInput::Structs::InputInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::Dimension::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::AdditionalInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::Parameter::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::ContentSearch::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::StyleInformation::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::BrandingInformation::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AudioOutput::Structs::OutputInfo::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEP::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::SimpleStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NestedStruct::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NestedStructList::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::DoubleNestedStructList::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType & value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Events::TestEvent::DecodableType & value);
#pragma GCC diagnostic pop

CHIP_ERROR LogValue(const char * label, size_t indent, AccountLogin::Commands::GetSetupPINResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, ApplicationLauncher::Commands::LauncherResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Channel::Commands::ChangeChannelResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, ContentLauncher::Commands::LaunchResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::GetCredentialStatusResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::GetUserResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::SetCredentialResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, GroupKeyManagement::Commands::KeySetReadResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::AddGroupResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::GetGroupMembershipResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::RemoveGroupResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::ViewGroupResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Identify::Commands::IdentifyQueryResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, KeypadInput::Commands::SendKeyResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, MediaPlayback::Commands::PlaybackResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::ConnectNetworkResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::NetworkConfigResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::AttestationResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent,
                    OperationalCredentials::Commands::CertificateChainResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::NOCResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::OpCSRResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::AddSceneResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::GetSceneMembershipResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::RemoveAllScenesResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::RemoveSceneResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::StoreSceneResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::ViewSceneResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TargetNavigator::Commands::NavigateTargetResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::BooleanResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::SimpleStructResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestAddArgumentsResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestEmitTestEventResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestEnumsResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestListInt8UReverseResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestNullableOptionalResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestSpecificResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Thermostat::Commands::GetRelayStatusLogResponse::DecodableType value);
CHIP_ERROR LogValue(const char * label, size_t indent, Thermostat::Commands::GetWeeklyScheduleResponse::DecodableType value);

template <typename X,
          typename std::enable_if_t<
              std::is_integral<X>::value && !std::is_same<std::remove_cv_t<std::remove_reference_t<X>>, bool>::value, int> = 0>
CHIP_ERROR LogValue(const char * label, size_t indent, X value)
{
    ChipLogProgress(chipTool, "%s%s: %s", IndentStr(indent).c_str(), label, std::to_string(value).c_str());
    return CHIP_NO_ERROR;
}

template <typename X, typename std::enable_if_t<std::is_floating_point<X>::value, int> = 0>
CHIP_ERROR LogValue(const char * label, size_t indent, X value)
{
    ChipLogProgress(chipTool, "%s%s: %s", IndentStr(indent).c_str(), label, std::to_string(value).c_str());
    return CHIP_NO_ERROR;
}

CHIP_ERROR LogValue(const char * label, size_t indent, bool value)
{
    ChipLogProgress(chipTool, "%s%s: %s", IndentStr(indent).c_str(), label, value ? "TRUE" : "FALSE");
    return CHIP_NO_ERROR;
}

template <typename X, typename std::enable_if_t<std::is_enum<X>::value, int> = 0>
CHIP_ERROR LogValue(const char * label, size_t indent, X value)
{
    return LogValue(label, indent, chip::to_underlying(value));
}

CHIP_ERROR LogValue(const char * label, size_t indent, chip::CharSpan value)
{
    ChipLogProgress(chipTool, "%s%s: %.*s", IndentStr(indent).c_str(), label, static_cast<int>(value.size()), value.data());
    return CHIP_NO_ERROR;
}

CHIP_ERROR LogValue(const char * label, size_t indent, chip::ByteSpan value)
{
    char buffer[CHIP_CONFIG_LOG_MESSAGE_MAX_SIZE];
    if (CHIP_NO_ERROR ==
        chip::Encoding::BytesToUppercaseHexString(value.data(), value.size(), &buffer[0], CHIP_CONFIG_LOG_MESSAGE_MAX_SIZE))
    {
        ChipLogProgress(chipTool, "%s%s: %s", IndentStr(indent).c_str(), label, buffer);
    }
    else
    {
        ChipLogProgress(chipTool, "%s%s: %zu", IndentStr(indent).c_str(), label, value.size());
    }
    return CHIP_NO_ERROR;
}

template <typename T>
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::DataModel::DecodableList<T> & value)
{
    size_t count   = 0;
    CHIP_ERROR err = value.ComputeSize(&count);
    if (err != CHIP_NO_ERROR)
    {
        return err;
    }
    ChipLogProgress(chipTool, "%s%s: %zu entries", IndentStr(indent).c_str(), label, count);

    auto iter = value.begin();
    size_t i  = 0;
    while (iter.Next())
    {
        ++i;
        std::string itemLabel = std::string("[") + std::to_string(i) + "]";
        ReturnErrorOnFailure(LogValue(itemLabel.c_str(), indent + 1, iter.GetValue()));
    }
    if (iter.GetStatus() != CHIP_NO_ERROR)
    {
        ChipLogProgress(chipTool, "%sList truncated due to invalid value", IndentStr(indent + 1).c_str());
    }
    return iter.GetStatus();
}

template <typename T>
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::DataModel::Nullable<T> & value)
{
    if (!value.IsNull())
    {
        return LogValue(label, indent, value.Value());
    }
    ChipLogProgress(chipTool, "%s%s: null", IndentStr(indent).c_str(), label);
    return CHIP_NO_ERROR;
}

template <typename T>
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::Optional<T> & value)
{
    if (value.HasValue())
    {
        return LogValue(label, indent, value.Value());
    }

    return CHIP_NO_ERROR;
}

template <typename X>
CHIP_ERROR LogValue(const char * label, size_t indent, chip::BitFlags<X> value)
{
    return LogValue(label, indent, value.Raw());
}

// We output helpers for all structs here, including ones we might not actually
// be logging.
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-function"
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::detail::Structs::LabelStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Label", indent + 1, value.label);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Label'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Value", indent + 1, value.value);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Value'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}

CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Scenes::Structs::SceneExtensionFieldSet::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ClusterId", indent + 1, value.clusterId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ClusterId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Length", indent + 1, value.length);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Length'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Value", indent + 1, value.value);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Value'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::PowerProfileRecord::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("PowerProfileId", indent + 1, value.powerProfileId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PowerProfileId'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EnergyPhaseId", indent + 1, value.energyPhaseId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EnergyPhaseId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PowerProfileRemoteControl", indent + 1, value.powerProfileRemoteControl);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PowerProfileRemoteControl'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PowerProfileState", indent + 1, value.powerProfileState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PowerProfileState'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::ScheduledPhase::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("EnergyPhaseId", indent + 1, value.energyPhaseId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EnergyPhaseId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ScheduledTime", indent + 1, value.scheduledTime);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ScheduledTime'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PowerProfile::Structs::TransferredPhase::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("EnergyPhaseId", indent + 1, value.energyPhaseId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EnergyPhaseId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MacroPhaseId", indent + 1, value.macroPhaseId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MacroPhaseId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ExpectedDuration", indent + 1, value.expectedDuration);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExpectedDuration'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PeakPower", indent + 1, value.peakPower);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PeakPower'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Energy", indent + 1, value.energy);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Energy'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MaxActivationDelay", indent + 1, value.maxActivationDelay);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MaxActivationDelay'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Type", indent + 1, value.type);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Type'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Revision", indent + 1, value.revision);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Revision'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::Target::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Cluster", indent + 1, value.cluster);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Cluster'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Endpoint", indent + 1, value.endpoint);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Endpoint'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("DeviceType", indent + 1, value.deviceType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'DeviceType'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::AccessControlEntry::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Privilege", indent + 1, value.privilege);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Privilege'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("AuthMode", indent + 1, value.authMode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'AuthMode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Subjects", indent + 1, value.subjects);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Subjects'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Targets", indent + 1, value.targets);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Targets'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AccessControl::Structs::ExtensionEntry::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Data", indent + 1, value.data);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Data'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ActionID", indent + 1, value.actionID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ActionID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Type", indent + 1, value.type);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Type'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EndpointListID", indent + 1, value.endpointListID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EndpointListID'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SupportedCommands", indent + 1, value.supportedCommands);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'SupportedCommands'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Status", indent + 1, value.status);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Status'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("EndpointListID", indent + 1, value.endpointListID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EndpointListID'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Type", indent + 1, value.type);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Type'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Endpoints", indent + 1, value.endpoints);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Endpoints'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ProviderNodeID", indent + 1, value.providerNodeID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ProviderNodeID'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Endpoint", indent + 1, value.endpoint);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Endpoint'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FailSafeExpiryLengthMs", indent + 1, value.failSafeExpiryLengthMs);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FailSafeExpiryLengthMs'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NetworkID", indent + 1, value.networkID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NetworkID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Connected", indent + 1, value.connected);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Connected'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::ThreadInterfaceScanResult::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("PanId", indent + 1, value.panId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PanId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ExtendedPanId", indent + 1, value.extendedPanId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExtendedPanId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NetworkName", indent + 1, value.networkName);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NetworkName'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Channel", indent + 1, value.channel);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Channel'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Version", indent + 1, value.version);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Version'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ExtendedAddress", indent + 1, value.extendedAddress);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExtendedAddress'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Rssi", indent + 1, value.rssi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Rssi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Lqi", indent + 1, value.lqi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Lqi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::NetworkCommissioning::Structs::WiFiInterfaceScanResult::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Security", indent + 1, value.security);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Security'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Ssid", indent + 1, value.ssid);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Ssid'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Bssid", indent + 1, value.bssid);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Bssid'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Channel", indent + 1, value.channel);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Channel'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("WiFiBand", indent + 1, value.wiFiBand);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'WiFiBand'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Rssi", indent + 1, value.rssi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Rssi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FabricConnected", indent + 1, value.fabricConnected);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricConnected'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OffPremiseServicesReachableIPv4", indent + 1, value.offPremiseServicesReachableIPv4);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OffPremiseServicesReachableIPv4'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OffPremiseServicesReachableIPv6", indent + 1, value.offPremiseServicesReachableIPv6);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OffPremiseServicesReachableIPv6'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("HardwareAddress", indent + 1, value.hardwareAddress);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'HardwareAddress'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Type", indent + 1, value.type);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Type'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::SoftwareDiagnostics::Structs::SoftwareFaultStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Id", indent + 1, value.id);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Id'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FaultRecording", indent + 1, value.faultRecording);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FaultRecording'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Id", indent + 1, value.id);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Id'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("StackFreeCurrent", indent + 1, value.stackFreeCurrent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'StackFreeCurrent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("StackFreeMinimum", indent + 1, value.stackFreeMinimum);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'StackFreeMinimum'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("StackSize", indent + 1, value.stackSize);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'StackSize'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ExtAddress", indent + 1, value.extAddress);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExtAddress'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Age", indent + 1, value.age);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Age'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Rloc16", indent + 1, value.rloc16);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Rloc16'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LinkFrameCounter", indent + 1, value.linkFrameCounter);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LinkFrameCounter'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MleFrameCounter", indent + 1, value.mleFrameCounter);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MleFrameCounter'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Lqi", indent + 1, value.lqi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Lqi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("AverageRssi", indent + 1, value.averageRssi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'AverageRssi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LastRssi", indent + 1, value.lastRssi);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LastRssi'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FrameErrorRate", indent + 1, value.frameErrorRate);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FrameErrorRate'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MessageErrorRate", indent + 1, value.messageErrorRate);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MessageErrorRate'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("RxOnWhenIdle", indent + 1, value.rxOnWhenIdle);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'RxOnWhenIdle'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FullThreadDevice", indent + 1, value.fullThreadDevice);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FullThreadDevice'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FullNetworkData", indent + 1, value.fullNetworkData);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FullNetworkData'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("IsChild", indent + 1, value.isChild);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'IsChild'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ActiveTimestampPresent", indent + 1, value.activeTimestampPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ActiveTimestampPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PendingTimestampPresent", indent + 1, value.pendingTimestampPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PendingTimestampPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MasterKeyPresent", indent + 1, value.masterKeyPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MasterKeyPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NetworkNamePresent", indent + 1, value.networkNamePresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NetworkNamePresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ExtendedPanIdPresent", indent + 1, value.extendedPanIdPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExtendedPanIdPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MeshLocalPrefixPresent", indent + 1, value.meshLocalPrefixPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MeshLocalPrefixPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("DelayPresent", indent + 1, value.delayPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'DelayPresent'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PanIdPresent", indent + 1, value.panIdPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PanIdPresent'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ChannelPresent", indent + 1, value.channelPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ChannelPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PskcPresent", indent + 1, value.pskcPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PskcPresent'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SecurityPolicyPresent", indent + 1, value.securityPolicyPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'SecurityPolicyPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ChannelMaskPresent", indent + 1, value.channelMaskPresent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ChannelMaskPresent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ExtAddress", indent + 1, value.extAddress);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExtAddress'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Rloc16", indent + 1, value.rloc16);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Rloc16'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("RouterId", indent + 1, value.routerId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'RouterId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NextHop", indent + 1, value.nextHop);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NextHop'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PathCost", indent + 1, value.pathCost);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PathCost'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LQIIn", indent + 1, value.LQIIn);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LQIIn'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LQIOut", indent + 1, value.LQIOut);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LQIOut'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Age", indent + 1, value.age);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Age'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Allocated", indent + 1, value.allocated);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Allocated'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LinkEstablished", indent + 1, value.linkEstablished);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LinkEstablished'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("RotationTime", indent + 1, value.rotationTime);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'RotationTime'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Flags", indent + 1, value.flags);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Flags'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("RootPublicKey", indent + 1, value.rootPublicKey);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'RootPublicKey'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("VendorId", indent + 1, value.vendorId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'VendorId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FabricId", indent + 1, value.fabricId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NodeId", indent + 1, value.nodeId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NodeId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Label", indent + 1, value.label);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Label'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Noc", indent + 1, value.noc);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Noc'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("GroupId", indent + 1, value.groupId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'GroupId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Endpoints", indent + 1, value.endpoints);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Endpoints'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("GroupName", indent + 1, value.groupName);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'GroupName'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("GroupId", indent + 1, value.groupId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'GroupId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("GroupKeySetID", indent + 1, value.groupKeySetID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'GroupKeySetID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GroupKeyManagement::Structs::GroupKeySet::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("GroupKeySetID", indent + 1, value.groupKeySetID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'GroupKeySetID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SecurityPolicy", indent + 1, value.securityPolicy);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'SecurityPolicy'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochKey0", indent + 1, value.epochKey0);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochKey0'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochStartTime0", indent + 1, value.epochStartTime0);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochStartTime0'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochKey1", indent + 1, value.epochKey1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochKey1'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochStartTime1", indent + 1, value.epochStartTime1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochStartTime1'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochKey2", indent + 1, value.epochKey2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochKey2'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("EpochStartTime2", indent + 1, value.epochStartTime2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'EpochStartTime2'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Label", indent + 1, value.label);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Label'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Mode", indent + 1, value.mode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Mode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SemanticTag", indent + 1, value.semanticTag);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'SemanticTag'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ModeSelect::Structs::SemanticTag::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("MfgCode", indent + 1, value.mfgCode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MfgCode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Value", indent + 1, value.value);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Value'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Structs::DlCredential::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("CredentialType", indent + 1, value.credentialType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'CredentialType'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("CredentialIndex", indent + 1, value.credentialIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'CredentialIndex'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::IasAce::Structs::IasAceZoneStatusResult::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ZoneId", indent + 1, value.zoneId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ZoneId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ZoneStatus", indent + 1, value.zoneStatus);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ZoneStatus'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Channel::Structs::ChannelInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("MajorNumber", indent + 1, value.majorNumber);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MajorNumber'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("MinorNumber", indent + 1, value.minorNumber);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'MinorNumber'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("CallSign", indent + 1, value.callSign);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'CallSign'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("AffiliateCallSign", indent + 1, value.affiliateCallSign);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'AffiliateCallSign'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Channel::Structs::LineupInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("OperatorName", indent + 1, value.operatorName);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OperatorName'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LineupName", indent + 1, value.lineupName);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LineupName'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PostalCode", indent + 1, value.postalCode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'PostalCode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("LineupInfoType", indent + 1, value.lineupInfoType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'LineupInfoType'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TargetNavigator::Structs::TargetInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Identifier", indent + 1, value.identifier);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Identifier'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::MediaPlayback::Structs::PlaybackPosition::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("UpdatedAt", indent + 1, value.updatedAt);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'UpdatedAt'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Position", indent + 1, value.position);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Position'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::MediaInput::Structs::InputInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Index", indent + 1, value.index);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Index'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("InputType", indent + 1, value.inputType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'InputType'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Description", indent + 1, value.description);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Description'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::Dimension::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Width", indent + 1, value.width);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Width'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Height", indent + 1, value.height);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Height'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Metric", indent + 1, value.metric);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Metric'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::AdditionalInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Value", indent + 1, value.value);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Value'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::Parameter::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Type", indent + 1, value.type);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Type'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Value", indent + 1, value.value);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Value'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ExternalIDList", indent + 1, value.externalIDList);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ExternalIDList'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::ContentSearch::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ParameterList", indent + 1, value.parameterList);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ParameterList'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::StyleInformation::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ImageUrl", indent + 1, value.imageUrl);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ImageUrl'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Color", indent + 1, value.color);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Color'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Size", indent + 1, value.size);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Size'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ContentLauncher::Structs::BrandingInformation::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ProviderName", indent + 1, value.providerName);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ProviderName'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Background", indent + 1, value.background);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Background'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Logo", indent + 1, value.logo);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Logo'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ProgressBar", indent + 1, value.progressBar);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ProgressBar'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Splash", indent + 1, value.splash);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Splash'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("WaterMark", indent + 1, value.waterMark);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'WaterMark'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::AudioOutput::Structs::OutputInfo::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Index", indent + 1, value.index);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Index'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OutputType", indent + 1, value.outputType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OutputType'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Name", indent + 1, value.name);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Name'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("CatalogVendorId", indent + 1, value.catalogVendorId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'CatalogVendorId'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ApplicationId", indent + 1, value.applicationId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ApplicationId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEP::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Application", indent + 1, value.application);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Application'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Endpoint", indent + 1, value.endpoint);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'Endpoint'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("CatalogVendorId", indent + 1, value.catalogVendorId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'CatalogVendorId'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ApplicationId", indent + 1, value.applicationId);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'ApplicationId'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::SimpleStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("A", indent + 1, value.a);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'A'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("B", indent + 1, value.b);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'B'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("C", indent + 1, value.c);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'C'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("D", indent + 1, value.d);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'D'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("E", indent + 1, value.e);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'E'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("F", indent + 1, value.f);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'F'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("G", indent + 1, value.g);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'G'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("H", indent + 1, value.h);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'H'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NullableInt", indent + 1, value.nullableInt);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableInt'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OptionalInt", indent + 1, value.optionalInt);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OptionalInt'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableOptionalInt", indent + 1, value.nullableOptionalInt);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableOptionalInt'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableString", indent + 1, value.nullableString);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableString'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OptionalString", indent + 1, value.optionalString);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OptionalString'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableOptionalString", indent + 1, value.nullableOptionalString);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableOptionalString'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableStruct", indent + 1, value.nullableStruct);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableStruct'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OptionalStruct", indent + 1, value.optionalStruct);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OptionalStruct'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableOptionalStruct", indent + 1, value.nullableOptionalStruct);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableOptionalStruct'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableList", indent + 1, value.nullableList);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableList'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OptionalList", indent + 1, value.optionalList);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OptionalList'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NullableOptionalList", indent + 1, value.nullableOptionalList);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'NullableOptionalList'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NestedStruct::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("A", indent + 1, value.a);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'A'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("B", indent + 1, value.b);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'B'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("C", indent + 1, value.c);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'C'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::NestedStructList::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("A", indent + 1, value.a);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'A'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("B", indent + 1, value.b);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'B'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("C", indent + 1, value.c);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'C'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("D", indent + 1, value.d);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'D'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("E", indent + 1, value.e);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'E'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("F", indent + 1, value.f);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'F'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("G", indent + 1, value.g);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'G'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::DoubleNestedStructList::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("A", indent + 1, value.a);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'A'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OperationalCert", indent + 1, value.operationalCert);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sStruct truncated due to invalid value for 'OperationalCert'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}

CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Events::StateChanged::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ActionID", indent + 1, value.actionID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ActionID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("InvokeID", indent + 1, value.invokeID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'InvokeID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NewState", indent + 1, value.newState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewState'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BridgedActions::Events::ActionFailed::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ActionID", indent + 1, value.actionID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ActionID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("InvokeID", indent + 1, value.invokeID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'InvokeID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NewState", indent + 1, value.newState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewState'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Error", indent + 1, value.error);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Error'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::StartUp::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("SoftwareVersion", indent + 1, value.softwareVersion);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SoftwareVersion'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::ShutDown::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Basic::Events::Leave::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Basic::Events::ReachableChanged::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ReachableNewValue", indent + 1, value.reachableNewValue);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ReachableNewValue'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::StateTransition::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("PreviousState", indent + 1, value.previousState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'PreviousState'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("NewState", indent + 1, value.newState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewState'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Reason", indent + 1, value.reason);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Reason'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("TargetSoftwareVersion", indent + 1, value.targetSoftwareVersion);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'TargetSoftwareVersion'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::VersionApplied::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("SoftwareVersion", indent + 1, value.softwareVersion);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SoftwareVersion'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ProductID", indent + 1, value.productID);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ProductID'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::DownloadError::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("SoftwareVersion", indent + 1, value.softwareVersion);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SoftwareVersion'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("BytesDownloaded", indent + 1, value.bytesDownloaded);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'BytesDownloaded'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("ProgressPercent", indent + 1, value.progressPercent);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ProgressPercent'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("PlatformCode", indent + 1, value.platformCode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'PlatformCode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Events::HardwareFaultChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Current", indent + 1, value.current);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Current'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Previous", indent + 1, value.previous);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Previous'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Events::RadioFaultChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Current", indent + 1, value.current);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Current'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Previous", indent + 1, value.previous);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Previous'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Events::NetworkFaultChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Current", indent + 1, value.current);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Current'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Previous", indent + 1, value.previous);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Previous'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::GeneralDiagnostics::Events::BootReason::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("BootReason", indent + 1, value.bootReason);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'BootReason'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::SoftwareDiagnostics::Events::SoftwareFault::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("SoftwareFault", indent + 1, value.softwareFault);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SoftwareFault'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::ThreadNetworkDiagnostics::Events::ConnectionStatus::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ConnectionStatus", indent + 1, value.connectionStatus);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ConnectionStatus'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::WiFiNetworkDiagnostics::Events::Disconnection::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ReasonCode", indent + 1, value.reasonCode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ReasonCode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::WiFiNetworkDiagnostics::Events::AssociationFailure::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("AssociationFailure", indent + 1, value.associationFailure);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'AssociationFailure'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Status", indent + 1, value.status);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Status'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::WiFiNetworkDiagnostics::Events::ConnectionStatus::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("ConnectionStatus", indent + 1, value.connectionStatus);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'ConnectionStatus'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::SwitchLatched::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NewPosition", indent + 1, value.newPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewPosition'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::InitialPress::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NewPosition", indent + 1, value.newPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewPosition'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, const chip::app::Clusters::Switch::Events::LongPress::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NewPosition", indent + 1, value.newPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewPosition'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::ShortRelease::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("PreviousPosition", indent + 1, value.previousPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'PreviousPosition'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::LongRelease::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("PreviousPosition", indent + 1, value.previousPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'PreviousPosition'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::MultiPressOngoing::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NewPosition", indent + 1, value.newPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewPosition'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("CurrentNumberOfPressesCounted", indent + 1, value.currentNumberOfPressesCounted);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'CurrentNumberOfPressesCounted'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::Switch::Events::MultiPressComplete::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("NewPosition", indent + 1, value.newPosition);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'NewPosition'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("TotalNumberOfPressesCounted", indent + 1, value.totalNumberOfPressesCounted);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'TotalNumberOfPressesCounted'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::BooleanState::Events::StateChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("StateValue", indent + 1, value.stateValue);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'StateValue'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::DoorLockAlarm::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("AlarmCode", indent + 1, value.alarmCode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'AlarmCode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::DoorStateChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("DoorState", indent + 1, value.doorState);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'DoorState'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockOperation::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("LockOperationType", indent + 1, value.lockOperationType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'LockOperationType'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OperationSource", indent + 1, value.operationSource);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'OperationSource'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("UserIndex", indent + 1, value.userIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'UserIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SourceNode", indent + 1, value.sourceNode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SourceNode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Credentials", indent + 1, value.credentials);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Credentials'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockOperationError::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("LockOperationType", indent + 1, value.lockOperationType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'LockOperationType'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OperationSource", indent + 1, value.operationSource);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'OperationSource'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OperationError", indent + 1, value.operationError);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'OperationError'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("UserIndex", indent + 1, value.userIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'UserIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SourceNode", indent + 1, value.sourceNode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SourceNode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Credentials", indent + 1, value.credentials);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Credentials'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::DoorLock::Events::LockUserChange::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("LockDataType", indent + 1, value.lockDataType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'LockDataType'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("DataOperationType", indent + 1, value.dataOperationType);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'DataOperationType'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("OperationSource", indent + 1, value.operationSource);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'OperationSource'",
                            IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("UserIndex", indent + 1, value.userIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'UserIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("FabricIndex", indent + 1, value.fabricIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'FabricIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("SourceNode", indent + 1, value.sourceNode);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'SourceNode'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("DataIndex", indent + 1, value.dataIndex);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'DataIndex'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageLow::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageHigh::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PowerMissingPhase::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureLow::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureHigh::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::DryRunning::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::MotorTemperatureHigh::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PumpMotorFatalFailure::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicTemperatureHigh::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::PumpBlocked::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::SensorFailure::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR
LogValue(const char * label, size_t indent,
         const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicNonFatalFailure::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicFatalFailure::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::GeneralFault::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::Leakage::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::AirDetection::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::PumpConfigurationAndControl::Events::TurbineOperation::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    const chip::app::Clusters::TestCluster::Events::TestEvent::DecodableType & value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    {
        CHIP_ERROR err = LogValue("Arg1", indent + 1, value.arg1);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg1'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Arg2", indent + 1, value.arg2);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg2'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Arg3", indent + 1, value.arg3);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg3'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Arg4", indent + 1, value.arg4);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg4'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Arg5", indent + 1, value.arg5);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg5'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    {
        CHIP_ERROR err = LogValue("Arg6", indent + 1, value.arg6);
        if (err != CHIP_NO_ERROR)
        {
            ChipLogProgress(chipTool, "%sEvent truncated due to invalid value for 'Arg6'", IndentStr(indent + 1).c_str());
            return err;
        }
    }
    ChipLogProgress(chipTool, "%s}", IndentStr(indent).c_str());
    return CHIP_NO_ERROR;
}
#pragma GCC diagnostic pop

CHIP_ERROR LogValue(const char * label, size_t indent, AccountLogin::Commands::GetSetupPINResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("setupPIN", 1, value.setupPIN));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, ApplicationLauncher::Commands::LauncherResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("data", 1, value.data));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Channel::Commands::ChangeChannelResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("channelMatch", 1, value.channelMatch));
    ReturnErrorOnFailure(LogValue("errorType", 1, value.errorType));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, ContentLauncher::Commands::LaunchResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("data", 1, value.data));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("content", 1, value.content));
    ReturnErrorOnFailure(LogValue("timeStamp", 1, value.timeStamp));
    ReturnErrorOnFailure(LogValue("timeSinceBoot", 1, value.timeSinceBoot));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::GetCredentialStatusResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("credentialExists", 1, value.credentialExists));
    ReturnErrorOnFailure(LogValue("userIndex", 1, value.userIndex));
    ReturnErrorOnFailure(LogValue("nextCredentialIndex", 1, value.nextCredentialIndex));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::GetUserResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("userIndex", 1, value.userIndex));
    ReturnErrorOnFailure(LogValue("userName", 1, value.userName));
    ReturnErrorOnFailure(LogValue("userUniqueId", 1, value.userUniqueId));
    ReturnErrorOnFailure(LogValue("userStatus", 1, value.userStatus));
    ReturnErrorOnFailure(LogValue("userType", 1, value.userType));
    ReturnErrorOnFailure(LogValue("credentialRule", 1, value.credentialRule));
    ReturnErrorOnFailure(LogValue("credentials", 1, value.credentials));
    ReturnErrorOnFailure(LogValue("creatorFabricIndex", 1, value.creatorFabricIndex));
    ReturnErrorOnFailure(LogValue("lastModifiedFabricIndex", 1, value.lastModifiedFabricIndex));
    ReturnErrorOnFailure(LogValue("nextUserIndex", 1, value.nextUserIndex));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, DoorLock::Commands::SetCredentialResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("userIndex", 1, value.userIndex));
    ReturnErrorOnFailure(LogValue("nextCredentialIndex", 1, value.nextCredentialIndex));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("errorCode", 1, value.errorCode));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("errorCode", 1, value.errorCode));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("errorCode", 1, value.errorCode));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("groupKeySetIDs", 1, value.groupKeySetIDs));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, GroupKeyManagement::Commands::KeySetReadResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("groupKeySet", 1, value.groupKeySet));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::AddGroupResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::GetGroupMembershipResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("capacity", 1, value.capacity));
    ReturnErrorOnFailure(LogValue("groupList", 1, value.groupList));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::RemoveGroupResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Groups::Commands::ViewGroupResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("groupName", 1, value.groupName));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Identify::Commands::IdentifyQueryResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("timeout", 1, value.timeout));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, KeypadInput::Commands::SendKeyResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, MediaPlayback::Commands::PlaybackResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::ConnectNetworkResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("networkingStatus", 1, value.networkingStatus));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    ReturnErrorOnFailure(LogValue("errorValue", 1, value.errorValue));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::NetworkConfigResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("networkingStatus", 1, value.networkingStatus));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("networkingStatus", 1, value.networkingStatus));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    ReturnErrorOnFailure(LogValue("wiFiScanResults", 1, value.wiFiScanResults));
    ReturnErrorOnFailure(LogValue("threadScanResults", 1, value.threadScanResults));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("action", 1, value.action));
    ReturnErrorOnFailure(LogValue("delayedActionTime", 1, value.delayedActionTime));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("delayedActionTime", 1, value.delayedActionTime));
    ReturnErrorOnFailure(LogValue("imageURI", 1, value.imageURI));
    ReturnErrorOnFailure(LogValue("softwareVersion", 1, value.softwareVersion));
    ReturnErrorOnFailure(LogValue("softwareVersionString", 1, value.softwareVersionString));
    ReturnErrorOnFailure(LogValue("updateToken", 1, value.updateToken));
    ReturnErrorOnFailure(LogValue("userConsentNeeded", 1, value.userConsentNeeded));
    ReturnErrorOnFailure(LogValue("metadataForRequestor", 1, value.metadataForRequestor));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::AttestationResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("attestationElements", 1, value.attestationElements));
    ReturnErrorOnFailure(LogValue("signature", 1, value.signature));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent,
                    OperationalCredentials::Commands::CertificateChainResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("certificate", 1, value.certificate));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::NOCResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("statusCode", 1, value.statusCode));
    ReturnErrorOnFailure(LogValue("fabricIndex", 1, value.fabricIndex));
    ReturnErrorOnFailure(LogValue("debugText", 1, value.debugText));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, OperationalCredentials::Commands::OpCSRResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("NOCSRElements", 1, value.NOCSRElements));
    ReturnErrorOnFailure(LogValue("attestationSignature", 1, value.attestationSignature));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::AddSceneResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("sceneId", 1, value.sceneId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::GetSceneMembershipResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("capacity", 1, value.capacity));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("sceneCount", 1, value.sceneCount));
    ReturnErrorOnFailure(LogValue("sceneList", 1, value.sceneList));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::RemoveAllScenesResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::RemoveSceneResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("sceneId", 1, value.sceneId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::StoreSceneResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("sceneId", 1, value.sceneId));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Scenes::Commands::ViewSceneResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("groupId", 1, value.groupId));
    ReturnErrorOnFailure(LogValue("sceneId", 1, value.sceneId));
    ReturnErrorOnFailure(LogValue("transitionTime", 1, value.transitionTime));
    ReturnErrorOnFailure(LogValue("sceneName", 1, value.sceneName));
    ReturnErrorOnFailure(LogValue("extensionFieldSets", 1, value.extensionFieldSets));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TargetNavigator::Commands::NavigateTargetResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("status", 1, value.status));
    ReturnErrorOnFailure(LogValue("data", 1, value.data));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::BooleanResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("value", 1, value.value));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::SimpleStructResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("arg1", 1, value.arg1));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestAddArgumentsResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("returnValue", 1, value.returnValue));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestEmitTestEventResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("value", 1, value.value));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestEnumsResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("arg1", 1, value.arg1));
    ReturnErrorOnFailure(LogValue("arg2", 1, value.arg2));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestListInt8UReverseResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("arg1", 1, value.arg1));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestNullableOptionalResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("wasPresent", 1, value.wasPresent));
    ReturnErrorOnFailure(LogValue("wasNull", 1, value.wasNull));
    ReturnErrorOnFailure(LogValue("value", 1, value.value));
    ReturnErrorOnFailure(LogValue("originalValue", 1, value.originalValue));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, TestCluster::Commands::TestSpecificResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("returnValue", 1, value.returnValue));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Thermostat::Commands::GetRelayStatusLogResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("timeOfDay", 1, value.timeOfDay));
    ReturnErrorOnFailure(LogValue("relayStatus", 1, value.relayStatus));
    ReturnErrorOnFailure(LogValue("localTemperature", 1, value.localTemperature));
    ReturnErrorOnFailure(LogValue("humidityInPercentage", 1, value.humidityInPercentage));
    ReturnErrorOnFailure(LogValue("setpoint", 1, value.setpoint));
    ReturnErrorOnFailure(LogValue("unreadEntries", 1, value.unreadEntries));
    return CHIP_NO_ERROR;
}
CHIP_ERROR LogValue(const char * label, size_t indent, Thermostat::Commands::GetWeeklyScheduleResponse::DecodableType value)
{
    ChipLogProgress(chipTool, "%s%s: {", IndentStr(indent).c_str(), label);
    ReturnErrorOnFailure(LogValue("numberOfTransitionsForSequence", 1, value.numberOfTransitionsForSequence));
    ReturnErrorOnFailure(LogValue("dayOfWeekForSequence", 1, value.dayOfWeekForSequence));
    ReturnErrorOnFailure(LogValue("modeForSequence", 1, value.modeForSequence));
    ReturnErrorOnFailure(LogValue("payload", 1, value.payload));
    return CHIP_NO_ERROR;
}

CHIP_ERROR LogAttribute(const chip::app::ConcreteDataAttributePath & path, chip::TLV::TLVReader * data)
{
    ChipLogProgress(chipTool, "Endpoint: %" PRIu16 " Cluster: " ChipLogFormatMEI " Attribute " ChipLogFormatMEI, path.mEndpointId,
                    ChipLogValueMEI(path.mClusterId), ChipLogValueMEI(path.mAttributeId));

    switch (path.mClusterId)
    {
    case AccessControl::Id: {
        switch (path.mAttributeId)
        {
        case AccessControl::Attributes::Acl::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::AccessControl::Structs::AccessControlEntry::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ACL", 1, value);
        }
        case AccessControl::Attributes::Extension::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::AccessControl::Structs::ExtensionEntry::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Extension", 1, value);
        }
        case AccessControl::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case AccessControl::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case AccountLogin::Id: {
        switch (path.mAttributeId)
        {
        case AccountLogin::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case AccountLogin::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case AdministratorCommissioning::Id: {
        switch (path.mAttributeId)
        {
        case AdministratorCommissioning::Attributes::WindowStatus::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("WindowStatus", 1, value);
        }
        case AdministratorCommissioning::Attributes::AdminFabricIndex::Id: {
            chip::FabricIndex value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AdminFabricIndex", 1, value);
        }
        case AdministratorCommissioning::Attributes::AdminVendorId::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AdminVendorId", 1, value);
        }
        case AdministratorCommissioning::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case AdministratorCommissioning::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ApplicationBasic::Id: {
        switch (path.mAttributeId)
        {
        case ApplicationBasic::Attributes::VendorName::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("vendor name", 1, value);
        }
        case ApplicationBasic::Attributes::VendorId::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("vendor id", 1, value);
        }
        case ApplicationBasic::Attributes::ApplicationName::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("application name", 1, value);
        }
        case ApplicationBasic::Attributes::ProductId::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("product id", 1, value);
        }
        case ApplicationBasic::Attributes::ApplicationApp::Id: {
            chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("application app", 1, value);
        }
        case ApplicationBasic::Attributes::ApplicationStatus::Id: {
            chip::app::Clusters::ApplicationBasic::ApplicationStatusEnum value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("application status", 1, value);
        }
        case ApplicationBasic::Attributes::ApplicationVersion::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("application version", 1, value);
        }
        case ApplicationBasic::Attributes::AllowedVendorList::Id: {
            chip::app::DataModel::DecodableList<chip::VendorId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("allowed vendor list", 1, value);
        }
        case ApplicationBasic::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ApplicationBasic::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ApplicationLauncher::Id: {
        switch (path.mAttributeId)
        {
        case ApplicationLauncher::Attributes::ApplicationLauncherList::Id: {
            chip::app::DataModel::DecodableList<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("application launcher list", 1, value);
        }
        case ApplicationLauncher::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ApplicationLauncher::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case AudioOutput::Id: {
        switch (path.mAttributeId)
        {
        case AudioOutput::Attributes::AudioOutputList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::AudioOutput::Structs::OutputInfo::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("audio output list", 1, value);
        }
        case AudioOutput::Attributes::CurrentAudioOutput::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current audio output", 1, value);
        }
        case AudioOutput::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case AudioOutput::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case BarrierControl::Id: {
        switch (path.mAttributeId)
        {
        case BarrierControl::Attributes::BarrierMovingState::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("barrier moving state", 1, value);
        }
        case BarrierControl::Attributes::BarrierSafetyStatus::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("barrier safety status", 1, value);
        }
        case BarrierControl::Attributes::BarrierCapabilities::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("barrier capabilities", 1, value);
        }
        case BarrierControl::Attributes::BarrierPosition::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("barrier position", 1, value);
        }
        case BarrierControl::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case BarrierControl::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Basic::Id: {
        switch (path.mAttributeId)
        {
        case Basic::Attributes::InteractionModelVersion::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InteractionModelVersion", 1, value);
        }
        case Basic::Attributes::VendorName::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("VendorName", 1, value);
        }
        case Basic::Attributes::VendorID::Id: {
            chip::VendorId value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("VendorID", 1, value);
        }
        case Basic::Attributes::ProductName::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ProductName", 1, value);
        }
        case Basic::Attributes::ProductID::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ProductID", 1, value);
        }
        case Basic::Attributes::NodeLabel::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NodeLabel", 1, value);
        }
        case Basic::Attributes::Location::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Location", 1, value);
        }
        case Basic::Attributes::HardwareVersion::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("HardwareVersion", 1, value);
        }
        case Basic::Attributes::HardwareVersionString::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("HardwareVersionString", 1, value);
        }
        case Basic::Attributes::SoftwareVersion::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SoftwareVersion", 1, value);
        }
        case Basic::Attributes::SoftwareVersionString::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SoftwareVersionString", 1, value);
        }
        case Basic::Attributes::ManufacturingDate::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ManufacturingDate", 1, value);
        }
        case Basic::Attributes::PartNumber::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PartNumber", 1, value);
        }
        case Basic::Attributes::ProductURL::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ProductURL", 1, value);
        }
        case Basic::Attributes::ProductLabel::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ProductLabel", 1, value);
        }
        case Basic::Attributes::SerialNumber::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SerialNumber", 1, value);
        }
        case Basic::Attributes::LocalConfigDisabled::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LocalConfigDisabled", 1, value);
        }
        case Basic::Attributes::Reachable::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Reachable", 1, value);
        }
        case Basic::Attributes::UniqueID::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("UniqueID", 1, value);
        }
        case Basic::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Basic::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case BinaryInputBasic::Id: {
        switch (path.mAttributeId)
        {
        case BinaryInputBasic::Attributes::OutOfService::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("out of service", 1, value);
        }
        case BinaryInputBasic::Attributes::PresentValue::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("present value", 1, value);
        }
        case BinaryInputBasic::Attributes::StatusFlags::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("status flags", 1, value);
        }
        case BinaryInputBasic::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case BinaryInputBasic::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Binding::Id: {
        switch (path.mAttributeId)
        {
        case Binding::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Binding::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case BooleanState::Id: {
        switch (path.mAttributeId)
        {
        case BooleanState::Attributes::StateValue::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StateValue", 1, value);
        }
        case BooleanState::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case BooleanState::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case BridgedActions::Id: {
        switch (path.mAttributeId)
        {
        case BridgedActions::Attributes::ActionList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::ActionStruct::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("action list", 1, value);
        }
        case BridgedActions::Attributes::EndpointList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("endpoint list", 1, value);
        }
        case BridgedActions::Attributes::SetupUrl::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("setup url", 1, value);
        }
        case BridgedActions::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case BridgedActions::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case BridgedDeviceBasic::Id: {
        switch (path.mAttributeId)
        {
        case BridgedDeviceBasic::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case BridgedDeviceBasic::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Channel::Id: {
        switch (path.mAttributeId)
        {
        case Channel::Attributes::ChannelList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::Channel::Structs::ChannelInfo::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("channel list", 1, value);
        }
        case Channel::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Channel::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ColorControl::Id: {
        switch (path.mAttributeId)
        {
        case ColorControl::Attributes::CurrentHue::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current hue", 1, value);
        }
        case ColorControl::Attributes::CurrentSaturation::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current saturation", 1, value);
        }
        case ColorControl::Attributes::RemainingTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("remaining time", 1, value);
        }
        case ColorControl::Attributes::CurrentX::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current x", 1, value);
        }
        case ColorControl::Attributes::CurrentY::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current y", 1, value);
        }
        case ColorControl::Attributes::DriftCompensation::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("drift compensation", 1, value);
        }
        case ColorControl::Attributes::CompensationText::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("compensation text", 1, value);
        }
        case ColorControl::Attributes::ColorTemperature::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color temperature", 1, value);
        }
        case ColorControl::Attributes::ColorMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color mode", 1, value);
        }
        case ColorControl::Attributes::ColorControlOptions::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color control options", 1, value);
        }
        case ColorControl::Attributes::NumberOfPrimaries::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("number of primaries", 1, value);
        }
        case ColorControl::Attributes::Primary1X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 1 x", 1, value);
        }
        case ColorControl::Attributes::Primary1Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 1 y", 1, value);
        }
        case ColorControl::Attributes::Primary1Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 1 intensity", 1, value);
        }
        case ColorControl::Attributes::Primary2X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 2 x", 1, value);
        }
        case ColorControl::Attributes::Primary2Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 2 y", 1, value);
        }
        case ColorControl::Attributes::Primary2Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 2 intensity", 1, value);
        }
        case ColorControl::Attributes::Primary3X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 3 x", 1, value);
        }
        case ColorControl::Attributes::Primary3Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 3 y", 1, value);
        }
        case ColorControl::Attributes::Primary3Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 3 intensity", 1, value);
        }
        case ColorControl::Attributes::Primary4X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 4 x", 1, value);
        }
        case ColorControl::Attributes::Primary4Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 4 y", 1, value);
        }
        case ColorControl::Attributes::Primary4Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 4 intensity", 1, value);
        }
        case ColorControl::Attributes::Primary5X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 5 x", 1, value);
        }
        case ColorControl::Attributes::Primary5Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 5 y", 1, value);
        }
        case ColorControl::Attributes::Primary5Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 5 intensity", 1, value);
        }
        case ColorControl::Attributes::Primary6X::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 6 x", 1, value);
        }
        case ColorControl::Attributes::Primary6Y::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 6 y", 1, value);
        }
        case ColorControl::Attributes::Primary6Intensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("primary 6 intensity", 1, value);
        }
        case ColorControl::Attributes::WhitePointX::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("white point x", 1, value);
        }
        case ColorControl::Attributes::WhitePointY::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("white point y", 1, value);
        }
        case ColorControl::Attributes::ColorPointRX::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point r x", 1, value);
        }
        case ColorControl::Attributes::ColorPointRY::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point r y", 1, value);
        }
        case ColorControl::Attributes::ColorPointRIntensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point r intensity", 1, value);
        }
        case ColorControl::Attributes::ColorPointGX::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point g x", 1, value);
        }
        case ColorControl::Attributes::ColorPointGY::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point g y", 1, value);
        }
        case ColorControl::Attributes::ColorPointGIntensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point g intensity", 1, value);
        }
        case ColorControl::Attributes::ColorPointBX::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point b x", 1, value);
        }
        case ColorControl::Attributes::ColorPointBY::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point b y", 1, value);
        }
        case ColorControl::Attributes::ColorPointBIntensity::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color point b intensity", 1, value);
        }
        case ColorControl::Attributes::EnhancedCurrentHue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("enhanced current hue", 1, value);
        }
        case ColorControl::Attributes::EnhancedColorMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("enhanced color mode", 1, value);
        }
        case ColorControl::Attributes::ColorLoopActive::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color loop active", 1, value);
        }
        case ColorControl::Attributes::ColorLoopDirection::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color loop direction", 1, value);
        }
        case ColorControl::Attributes::ColorLoopTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color loop time", 1, value);
        }
        case ColorControl::Attributes::ColorLoopStartEnhancedHue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color loop start enhanced hue", 1, value);
        }
        case ColorControl::Attributes::ColorLoopStoredEnhancedHue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color loop stored enhanced hue", 1, value);
        }
        case ColorControl::Attributes::ColorCapabilities::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color capabilities", 1, value);
        }
        case ColorControl::Attributes::ColorTempPhysicalMin::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color temp physical min", 1, value);
        }
        case ColorControl::Attributes::ColorTempPhysicalMax::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("color temp physical max", 1, value);
        }
        case ColorControl::Attributes::CoupleColorTempToLevelMinMireds::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("couple color temp to level min-mireds", 1, value);
        }
        case ColorControl::Attributes::StartUpColorTemperatureMireds::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("start up color temperature mireds", 1, value);
        }
        case ColorControl::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ColorControl::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ContentLauncher::Id: {
        switch (path.mAttributeId)
        {
        case ContentLauncher::Attributes::AcceptHeaderList::Id: {
            chip::app::DataModel::DecodableList<chip::CharSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("accept header list", 1, value);
        }
        case ContentLauncher::Attributes::SupportedStreamingProtocols::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("supported streaming protocols", 1, value);
        }
        case ContentLauncher::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ContentLauncher::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Descriptor::Id: {
        switch (path.mAttributeId)
        {
        case Descriptor::Attributes::DeviceList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::Descriptor::Structs::DeviceType::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("device list", 1, value);
        }
        case Descriptor::Attributes::ServerList::Id: {
            chip::app::DataModel::DecodableList<chip::ClusterId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("server list", 1, value);
        }
        case Descriptor::Attributes::ClientList::Id: {
            chip::app::DataModel::DecodableList<chip::ClusterId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("client list", 1, value);
        }
        case Descriptor::Attributes::PartsList::Id: {
            chip::app::DataModel::DecodableList<chip::EndpointId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("parts list", 1, value);
        }
        case Descriptor::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Descriptor::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case DiagnosticLogs::Id: {
        switch (path.mAttributeId)
        {
        case DiagnosticLogs::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        }
    }
    case DoorLock::Id: {
        switch (path.mAttributeId)
        {
        case DoorLock::Attributes::LockState::Id: {
            chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlLockState> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LockState", 1, value);
        }
        case DoorLock::Attributes::LockType::Id: {
            chip::app::Clusters::DoorLock::DlLockType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LockType", 1, value);
        }
        case DoorLock::Attributes::ActuatorEnabled::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActuatorEnabled", 1, value);
        }
        case DoorLock::Attributes::DoorState::Id: {
            chip::app::DataModel::Nullable<chip::app::Clusters::DoorLock::DlDoorState> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DoorState", 1, value);
        }
        case DoorLock::Attributes::NumberOfTotalUsersSupported::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NumberOfTotalUsersSupported", 1, value);
        }
        case DoorLock::Attributes::NumberOfPINUsersSupported::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NumberOfPINUsersSupported", 1, value);
        }
        case DoorLock::Attributes::MaxPINCodeLength::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxPINCodeLength", 1, value);
        }
        case DoorLock::Attributes::MinPINCodeLength::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinPINCodeLength", 1, value);
        }
        case DoorLock::Attributes::Language::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Language", 1, value);
        }
        case DoorLock::Attributes::AutoRelockTime::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AutoRelockTime", 1, value);
        }
        case DoorLock::Attributes::SoundVolume::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SoundVolume", 1, value);
        }
        case DoorLock::Attributes::OperatingMode::Id: {
            chip::app::Clusters::DoorLock::DlOperatingMode value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OperatingMode", 1, value);
        }
        case DoorLock::Attributes::SupportedOperatingModes::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupportedOperatingModes", 1, value);
        }
        case DoorLock::Attributes::EnableOneTouchLocking::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("EnableOneTouchLocking", 1, value);
        }
        case DoorLock::Attributes::EnablePrivacyModeButton::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("EnablePrivacyModeButton", 1, value);
        }
        case DoorLock::Attributes::WrongCodeEntryLimit::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("WrongCodeEntryLimit", 1, value);
        }
        case DoorLock::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case DoorLock::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ElectricalMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case ElectricalMeasurement::Attributes::MeasurementType::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("measurement type", 1, value);
        }
        case ElectricalMeasurement::Attributes::TotalActivePower::Id: {
            int32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("total active power", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsVoltage::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms voltage", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsVoltageMin::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms voltage min", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsVoltageMax::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms voltage max", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsCurrent::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms current", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsCurrentMin::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms current min", 1, value);
        }
        case ElectricalMeasurement::Attributes::RmsCurrentMax::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("rms current max", 1, value);
        }
        case ElectricalMeasurement::Attributes::ActivePower::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("active power", 1, value);
        }
        case ElectricalMeasurement::Attributes::ActivePowerMin::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("active power min", 1, value);
        }
        case ElectricalMeasurement::Attributes::ActivePowerMax::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("active power max", 1, value);
        }
        case ElectricalMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ElectricalMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case EthernetNetworkDiagnostics::Id: {
        switch (path.mAttributeId)
        {
        case EthernetNetworkDiagnostics::Attributes::PHYRate::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PHYRate", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::FullDuplex::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FullDuplex", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::PacketRxCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketRxCount", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::PacketTxCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketTxCount", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::TxErrCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxErrCount", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::CollisionCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CollisionCount", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::OverrunCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OverrunCount", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::CarrierDetect::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CarrierDetect", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::TimeSinceReset::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TimeSinceReset", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case EthernetNetworkDiagnostics::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case FixedLabel::Id: {
        switch (path.mAttributeId)
        {
        case FixedLabel::Attributes::LabelList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::FixedLabel::Structs::LabelStruct::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("label list", 1, value);
        }
        case FixedLabel::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case FixedLabel::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case FlowMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case FlowMeasurement::Attributes::MeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MeasuredValue", 1, value);
        }
        case FlowMeasurement::Attributes::MinMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinMeasuredValue", 1, value);
        }
        case FlowMeasurement::Attributes::MaxMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxMeasuredValue", 1, value);
        }
        case FlowMeasurement::Attributes::Tolerance::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Tolerance", 1, value);
        }
        case FlowMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case FlowMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case GeneralCommissioning::Id: {
        switch (path.mAttributeId)
        {
        case GeneralCommissioning::Attributes::Breadcrumb::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Breadcrumb", 1, value);
        }
        case GeneralCommissioning::Attributes::BasicCommissioningInfoList::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BasicCommissioningInfoList", 1, value);
        }
        case GeneralCommissioning::Attributes::RegulatoryConfig::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RegulatoryConfig", 1, value);
        }
        case GeneralCommissioning::Attributes::LocationCapability::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LocationCapability", 1, value);
        }
        case GeneralCommissioning::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case GeneralCommissioning::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case GeneralDiagnostics::Id: {
        switch (path.mAttributeId)
        {
        case GeneralDiagnostics::Attributes::NetworkInterfaces::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NetworkInterfaces", 1, value);
        }
        case GeneralDiagnostics::Attributes::RebootCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RebootCount", 1, value);
        }
        case GeneralDiagnostics::Attributes::UpTime::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("UpTime", 1, value);
        }
        case GeneralDiagnostics::Attributes::TotalOperationalHours::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TotalOperationalHours", 1, value);
        }
        case GeneralDiagnostics::Attributes::BootReasons::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BootReasons", 1, value);
        }
        case GeneralDiagnostics::Attributes::ActiveHardwareFaults::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveHardwareFaults", 1, value);
        }
        case GeneralDiagnostics::Attributes::ActiveRadioFaults::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveRadioFaults", 1, value);
        }
        case GeneralDiagnostics::Attributes::ActiveNetworkFaults::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveNetworkFaults", 1, value);
        }
        case GeneralDiagnostics::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case GeneralDiagnostics::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case GroupKeyManagement::Id: {
        switch (path.mAttributeId)
        {
        case GroupKeyManagement::Attributes::GroupKeyMap::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("groupKeyMap", 1, value);
        }
        case GroupKeyManagement::Attributes::GroupTable::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::GroupKeyManagement::Structs::GroupInfo::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("groupTable", 1, value);
        }
        case GroupKeyManagement::Attributes::MaxGroupsPerFabric::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("maxGroupsPerFabric", 1, value);
        }
        case GroupKeyManagement::Attributes::MaxGroupKeysPerFabric::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("maxGroupKeysPerFabric", 1, value);
        }
        case GroupKeyManagement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case GroupKeyManagement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Groups::Id: {
        switch (path.mAttributeId)
        {
        case Groups::Attributes::NameSupport::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("name support", 1, value);
        }
        case Groups::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Groups::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Identify::Id: {
        switch (path.mAttributeId)
        {
        case Identify::Attributes::IdentifyTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("identify time", 1, value);
        }
        case Identify::Attributes::IdentifyType::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("identify type", 1, value);
        }
        case Identify::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Identify::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case IlluminanceMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case IlluminanceMeasurement::Attributes::MeasuredValue::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MeasuredValue", 1, value);
        }
        case IlluminanceMeasurement::Attributes::MinMeasuredValue::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinMeasuredValue", 1, value);
        }
        case IlluminanceMeasurement::Attributes::MaxMeasuredValue::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxMeasuredValue", 1, value);
        }
        case IlluminanceMeasurement::Attributes::Tolerance::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Tolerance", 1, value);
        }
        case IlluminanceMeasurement::Attributes::LightSensorType::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LightSensorType", 1, value);
        }
        case IlluminanceMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case IlluminanceMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case KeypadInput::Id: {
        switch (path.mAttributeId)
        {
        case KeypadInput::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case KeypadInput::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case LevelControl::Id: {
        switch (path.mAttributeId)
        {
        case LevelControl::Attributes::CurrentLevel::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current level", 1, value);
        }
        case LevelControl::Attributes::RemainingTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("remaining time", 1, value);
        }
        case LevelControl::Attributes::MinLevel::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min level", 1, value);
        }
        case LevelControl::Attributes::MaxLevel::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("max level", 1, value);
        }
        case LevelControl::Attributes::CurrentFrequency::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current frequency", 1, value);
        }
        case LevelControl::Attributes::MinFrequency::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min frequency", 1, value);
        }
        case LevelControl::Attributes::MaxFrequency::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("max frequency", 1, value);
        }
        case LevelControl::Attributes::Options::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("options", 1, value);
        }
        case LevelControl::Attributes::OnOffTransitionTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("on off transition time", 1, value);
        }
        case LevelControl::Attributes::OnLevel::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("on level", 1, value);
        }
        case LevelControl::Attributes::OnTransitionTime::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("on transition time", 1, value);
        }
        case LevelControl::Attributes::OffTransitionTime::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("off transition time", 1, value);
        }
        case LevelControl::Attributes::DefaultMoveRate::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("default move rate", 1, value);
        }
        case LevelControl::Attributes::StartUpCurrentLevel::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("start up current level", 1, value);
        }
        case LevelControl::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case LevelControl::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case LevelControl::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case LocalizationConfiguration::Id: {
        switch (path.mAttributeId)
        {
        case LocalizationConfiguration::Attributes::ActiveLocale::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveLocale", 1, value);
        }
        case LocalizationConfiguration::Attributes::SupportedLocales::Id: {
            chip::app::DataModel::DecodableList<chip::CharSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupportedLocales", 1, value);
        }
        }
    }
    case LowPower::Id: {
        switch (path.mAttributeId)
        {
        case LowPower::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case LowPower::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case MediaInput::Id: {
        switch (path.mAttributeId)
        {
        case MediaInput::Attributes::MediaInputList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::MediaInput::Structs::InputInfo::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("media input list", 1, value);
        }
        case MediaInput::Attributes::CurrentMediaInput::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current media input", 1, value);
        }
        case MediaInput::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case MediaInput::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case MediaPlayback::Id: {
        switch (path.mAttributeId)
        {
        case MediaPlayback::Attributes::PlaybackState::Id: {
            chip::app::Clusters::MediaPlayback::PlaybackStateEnum value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("playback state", 1, value);
        }
        case MediaPlayback::Attributes::StartTime::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("start time", 1, value);
        }
        case MediaPlayback::Attributes::Duration::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("duration", 1, value);
        }
        case MediaPlayback::Attributes::PlaybackSpeed::Id: {
            float value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("playback speed", 1, value);
        }
        case MediaPlayback::Attributes::SeekRangeEnd::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("seek range end", 1, value);
        }
        case MediaPlayback::Attributes::SeekRangeStart::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("seek range start", 1, value);
        }
        case MediaPlayback::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case MediaPlayback::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ModeSelect::Id: {
        switch (path.mAttributeId)
        {
        case ModeSelect::Attributes::CurrentMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentMode", 1, value);
        }
        case ModeSelect::Attributes::SupportedModes::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupportedModes", 1, value);
        }
        case ModeSelect::Attributes::OnMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OnMode", 1, value);
        }
        case ModeSelect::Attributes::StartUpMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StartUpMode", 1, value);
        }
        case ModeSelect::Attributes::Description::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Description", 1, value);
        }
        case ModeSelect::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ModeSelect::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case NetworkCommissioning::Id: {
        switch (path.mAttributeId)
        {
        case NetworkCommissioning::Attributes::MaxNetworks::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxNetworks", 1, value);
        }
        case NetworkCommissioning::Attributes::Networks::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Networks", 1, value);
        }
        case NetworkCommissioning::Attributes::ScanMaxTimeSeconds::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ScanMaxTimeSeconds", 1, value);
        }
        case NetworkCommissioning::Attributes::ConnectMaxTimeSeconds::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ConnectMaxTimeSeconds", 1, value);
        }
        case NetworkCommissioning::Attributes::InterfaceEnabled::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InterfaceEnabled", 1, value);
        }
        case NetworkCommissioning::Attributes::LastNetworkingStatus::Id: {
            chip::app::Clusters::NetworkCommissioning::NetworkCommissioningStatus value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LastNetworkingStatus", 1, value);
        }
        case NetworkCommissioning::Attributes::LastNetworkID::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LastNetworkID", 1, value);
        }
        case NetworkCommissioning::Attributes::LastConnectErrorValue::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LastConnectErrorValue", 1, value);
        }
        case NetworkCommissioning::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case NetworkCommissioning::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OtaSoftwareUpdateProvider::Id: {
        switch (path.mAttributeId)
        {
        case OtaSoftwareUpdateProvider::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OtaSoftwareUpdateProvider::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OtaSoftwareUpdateRequestor::Id: {
        switch (path.mAttributeId)
        {
        case OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProviders::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DefaultOtaProviders", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Attributes::UpdatePossible::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("UpdatePossible", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Attributes::UpdateState::Id: {
            chip::app::Clusters::OtaSoftwareUpdateRequestor::OTAUpdateStateEnum value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("UpdateState", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Attributes::UpdateStateProgress::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("UpdateStateProgress", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OccupancySensing::Id: {
        switch (path.mAttributeId)
        {
        case OccupancySensing::Attributes::Occupancy::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("occupancy", 1, value);
        }
        case OccupancySensing::Attributes::OccupancySensorType::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("occupancy sensor type", 1, value);
        }
        case OccupancySensing::Attributes::OccupancySensorTypeBitmap::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("occupancy sensor type bitmap", 1, value);
        }
        case OccupancySensing::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OccupancySensing::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OnOff::Id: {
        switch (path.mAttributeId)
        {
        case OnOff::Attributes::OnOff::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OnOff", 1, value);
        }
        case OnOff::Attributes::GlobalSceneControl::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GlobalSceneControl", 1, value);
        }
        case OnOff::Attributes::OnTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OnTime", 1, value);
        }
        case OnOff::Attributes::OffWaitTime::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OffWaitTime", 1, value);
        }
        case OnOff::Attributes::StartUpOnOff::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StartUpOnOff", 1, value);
        }
        case OnOff::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OnOff::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case OnOff::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OnOffSwitchConfiguration::Id: {
        switch (path.mAttributeId)
        {
        case OnOffSwitchConfiguration::Attributes::SwitchType::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("switch type", 1, value);
        }
        case OnOffSwitchConfiguration::Attributes::SwitchActions::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("switch actions", 1, value);
        }
        case OnOffSwitchConfiguration::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OnOffSwitchConfiguration::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case OperationalCredentials::Id: {
        switch (path.mAttributeId)
        {
        case OperationalCredentials::Attributes::FabricsList::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("fabrics list", 1, value);
        }
        case OperationalCredentials::Attributes::SupportedFabrics::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupportedFabrics", 1, value);
        }
        case OperationalCredentials::Attributes::CommissionedFabrics::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CommissionedFabrics", 1, value);
        }
        case OperationalCredentials::Attributes::TrustedRootCertificates::Id: {
            chip::app::DataModel::DecodableList<chip::ByteSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TrustedRootCertificates", 1, value);
        }
        case OperationalCredentials::Attributes::CurrentFabricIndex::Id: {
            chip::FabricIndex value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentFabricIndex", 1, value);
        }
        case OperationalCredentials::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case OperationalCredentials::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case PowerSource::Id: {
        switch (path.mAttributeId)
        {
        case PowerSource::Attributes::Status::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Status", 1, value);
        }
        case PowerSource::Attributes::Order::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Order", 1, value);
        }
        case PowerSource::Attributes::Description::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Description", 1, value);
        }
        case PowerSource::Attributes::BatteryVoltage::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BatteryVoltage", 1, value);
        }
        case PowerSource::Attributes::BatteryPercentRemaining::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BatteryPercentRemaining", 1, value);
        }
        case PowerSource::Attributes::BatteryTimeRemaining::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BatteryTimeRemaining", 1, value);
        }
        case PowerSource::Attributes::BatteryChargeLevel::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BatteryChargeLevel", 1, value);
        }
        case PowerSource::Attributes::ActiveBatteryFaults::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveBatteryFaults", 1, value);
        }
        case PowerSource::Attributes::BatteryChargeState::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BatteryChargeState", 1, value);
        }
        case PowerSource::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case PowerSource::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case PowerSource::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case PowerSourceConfiguration::Id: {
        switch (path.mAttributeId)
        {
        case PowerSourceConfiguration::Attributes::Sources::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Sources", 1, value);
        }
        case PowerSourceConfiguration::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case PowerSourceConfiguration::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case PressureMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case PressureMeasurement::Attributes::MeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MeasuredValue", 1, value);
        }
        case PressureMeasurement::Attributes::MinMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinMeasuredValue", 1, value);
        }
        case PressureMeasurement::Attributes::MaxMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxMeasuredValue", 1, value);
        }
        case PressureMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case PressureMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case PumpConfigurationAndControl::Id: {
        switch (path.mAttributeId)
        {
        case PumpConfigurationAndControl::Attributes::MaxPressure::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxPressure", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxSpeed::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxSpeed", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxFlow::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxFlow", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MinConstPressure::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinConstPressure", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxConstPressure::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxConstPressure", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MinCompPressure::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinCompPressure", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxCompPressure::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxCompPressure", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MinConstSpeed::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinConstSpeed", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxConstSpeed::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxConstSpeed", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MinConstFlow::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinConstFlow", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxConstFlow::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxConstFlow", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MinConstTemp::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinConstTemp", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::MaxConstTemp::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxConstTemp", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::PumpStatus::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PumpStatus", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::EffectiveOperationMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("EffectiveOperationMode", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::EffectiveControlMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("EffectiveControlMode", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::Capacity::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Capacity", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::Speed::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Speed", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::LifetimeRunningHours::Id: {
            chip::app::DataModel::Nullable<uint32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LifetimeRunningHours", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::Power::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Power", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::LifetimeEnergyConsumed::Id: {
            chip::app::DataModel::Nullable<uint32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LifetimeEnergyConsumed", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::OperationMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OperationMode", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::ControlMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ControlMode", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::AlarmMask::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AlarmMask", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case PumpConfigurationAndControl::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case RelativeHumidityMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case RelativeHumidityMeasurement::Attributes::MeasuredValue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("measured value", 1, value);
        }
        case RelativeHumidityMeasurement::Attributes::MinMeasuredValue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min measured value", 1, value);
        }
        case RelativeHumidityMeasurement::Attributes::MaxMeasuredValue::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("max measured value", 1, value);
        }
        case RelativeHumidityMeasurement::Attributes::Tolerance::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("tolerance", 1, value);
        }
        case RelativeHumidityMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case RelativeHumidityMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Scenes::Id: {
        switch (path.mAttributeId)
        {
        case Scenes::Attributes::SceneCount::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("scene count", 1, value);
        }
        case Scenes::Attributes::CurrentScene::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current scene", 1, value);
        }
        case Scenes::Attributes::CurrentGroup::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current group", 1, value);
        }
        case Scenes::Attributes::SceneValid::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("scene valid", 1, value);
        }
        case Scenes::Attributes::NameSupport::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("name support", 1, value);
        }
        case Scenes::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Scenes::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case SoftwareDiagnostics::Id: {
        switch (path.mAttributeId)
        {
        case SoftwareDiagnostics::Attributes::ThreadMetrics::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ThreadMetrics", 1, value);
        }
        case SoftwareDiagnostics::Attributes::CurrentHeapFree::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentHeapFree", 1, value);
        }
        case SoftwareDiagnostics::Attributes::CurrentHeapUsed::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentHeapUsed", 1, value);
        }
        case SoftwareDiagnostics::Attributes::CurrentHeapHighWatermark::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentHeapHighWatermark", 1, value);
        }
        case SoftwareDiagnostics::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case SoftwareDiagnostics::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case SoftwareDiagnostics::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Switch::Id: {
        switch (path.mAttributeId)
        {
        case Switch::Attributes::NumberOfPositions::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("number of positions", 1, value);
        }
        case Switch::Attributes::CurrentPosition::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current position", 1, value);
        }
        case Switch::Attributes::MultiPressMax::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("multi press max", 1, value);
        }
        case Switch::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Switch::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case Switch::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case TargetNavigator::Id: {
        switch (path.mAttributeId)
        {
        case TargetNavigator::Attributes::TargetNavigatorList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::TargetNavigator::Structs::TargetInfo::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("target navigator list", 1, value);
        }
        case TargetNavigator::Attributes::CurrentNavigatorTarget::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("current navigator target", 1, value);
        }
        case TargetNavigator::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case TargetNavigator::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case TemperatureMeasurement::Id: {
        switch (path.mAttributeId)
        {
        case TemperatureMeasurement::Attributes::MeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MeasuredValue", 1, value);
        }
        case TemperatureMeasurement::Attributes::MinMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MinMeasuredValue", 1, value);
        }
        case TemperatureMeasurement::Attributes::MaxMeasuredValue::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MaxMeasuredValue", 1, value);
        }
        case TemperatureMeasurement::Attributes::Tolerance::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Tolerance", 1, value);
        }
        case TemperatureMeasurement::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case TemperatureMeasurement::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case TestCluster::Id: {
        switch (path.mAttributeId)
        {
        case TestCluster::Attributes::Boolean::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("boolean", 1, value);
        }
        case TestCluster::Attributes::Bitmap8::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("bitmap8", 1, value);
        }
        case TestCluster::Attributes::Bitmap16::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("bitmap16", 1, value);
        }
        case TestCluster::Attributes::Bitmap32::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("bitmap32", 1, value);
        }
        case TestCluster::Attributes::Bitmap64::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("bitmap64", 1, value);
        }
        case TestCluster::Attributes::Int8u::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int8u", 1, value);
        }
        case TestCluster::Attributes::Int16u::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int16u", 1, value);
        }
        case TestCluster::Attributes::Int24u::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int24u", 1, value);
        }
        case TestCluster::Attributes::Int32u::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int32u", 1, value);
        }
        case TestCluster::Attributes::Int40u::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int40u", 1, value);
        }
        case TestCluster::Attributes::Int48u::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int48u", 1, value);
        }
        case TestCluster::Attributes::Int56u::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int56u", 1, value);
        }
        case TestCluster::Attributes::Int64u::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int64u", 1, value);
        }
        case TestCluster::Attributes::Int8s::Id: {
            int8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int8s", 1, value);
        }
        case TestCluster::Attributes::Int16s::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int16s", 1, value);
        }
        case TestCluster::Attributes::Int24s::Id: {
            int32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int24s", 1, value);
        }
        case TestCluster::Attributes::Int32s::Id: {
            int32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int32s", 1, value);
        }
        case TestCluster::Attributes::Int40s::Id: {
            int64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int40s", 1, value);
        }
        case TestCluster::Attributes::Int48s::Id: {
            int64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int48s", 1, value);
        }
        case TestCluster::Attributes::Int56s::Id: {
            int64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int56s", 1, value);
        }
        case TestCluster::Attributes::Int64s::Id: {
            int64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("int64s", 1, value);
        }
        case TestCluster::Attributes::Enum8::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("enum8", 1, value);
        }
        case TestCluster::Attributes::Enum16::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("enum16", 1, value);
        }
        case TestCluster::Attributes::FloatSingle::Id: {
            float value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("float_single", 1, value);
        }
        case TestCluster::Attributes::FloatDouble::Id: {
            double value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("float_double", 1, value);
        }
        case TestCluster::Attributes::OctetString::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("octet_string", 1, value);
        }
        case TestCluster::Attributes::ListInt8u::Id: {
            chip::app::DataModel::DecodableList<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("list_int8u", 1, value);
        }
        case TestCluster::Attributes::ListOctetString::Id: {
            chip::app::DataModel::DecodableList<chip::ByteSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("list_octet_string", 1, value);
        }
        case TestCluster::Attributes::ListStructOctetString::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::TestCluster::Structs::TestListStructOctet::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("list_struct_octet_string", 1, value);
        }
        case TestCluster::Attributes::LongOctetString::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("long_octet_string", 1, value);
        }
        case TestCluster::Attributes::CharString::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("char_string", 1, value);
        }
        case TestCluster::Attributes::LongCharString::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("long_char_string", 1, value);
        }
        case TestCluster::Attributes::EpochUs::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("epoch_us", 1, value);
        }
        case TestCluster::Attributes::EpochS::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("epoch_s", 1, value);
        }
        case TestCluster::Attributes::VendorId::Id: {
            chip::VendorId value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("vendor_id", 1, value);
        }
        case TestCluster::Attributes::ListNullablesAndOptionalsStruct::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("list_nullables_and_optionals_struct", 1, value);
        }
        case TestCluster::Attributes::EnumAttr::Id: {
            chip::app::Clusters::TestCluster::SimpleEnum value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("enum_attr", 1, value);
        }
        case TestCluster::Attributes::StructAttr::Id: {
            chip::app::Clusters::TestCluster::Structs::SimpleStruct::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("struct_attr", 1, value);
        }
        case TestCluster::Attributes::RangeRestrictedInt8u::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("range_restricted_int8u", 1, value);
        }
        case TestCluster::Attributes::RangeRestrictedInt8s::Id: {
            int8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("range_restricted_int8s", 1, value);
        }
        case TestCluster::Attributes::RangeRestrictedInt16u::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("range_restricted_int16u", 1, value);
        }
        case TestCluster::Attributes::RangeRestrictedInt16s::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("range_restricted_int16s", 1, value);
        }
        case TestCluster::Attributes::ListLongOctetString::Id: {
            chip::app::DataModel::DecodableList<chip::ByteSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("list_long_octet_string", 1, value);
        }
        case TestCluster::Attributes::TimedWriteBoolean::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("timed_write_boolean", 1, value);
        }
        case TestCluster::Attributes::Unsupported::Id: {
            bool value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("unsupported", 1, value);
        }
        case TestCluster::Attributes::NullableBoolean::Id: {
            chip::app::DataModel::Nullable<bool> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_boolean", 1, value);
        }
        case TestCluster::Attributes::NullableBitmap8::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_bitmap8", 1, value);
        }
        case TestCluster::Attributes::NullableBitmap16::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_bitmap16", 1, value);
        }
        case TestCluster::Attributes::NullableBitmap32::Id: {
            chip::app::DataModel::Nullable<uint32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_bitmap32", 1, value);
        }
        case TestCluster::Attributes::NullableBitmap64::Id: {
            chip::app::DataModel::Nullable<uint64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_bitmap64", 1, value);
        }
        case TestCluster::Attributes::NullableInt8u::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int8u", 1, value);
        }
        case TestCluster::Attributes::NullableInt16u::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int16u", 1, value);
        }
        case TestCluster::Attributes::NullableInt24u::Id: {
            chip::app::DataModel::Nullable<uint32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int24u", 1, value);
        }
        case TestCluster::Attributes::NullableInt32u::Id: {
            chip::app::DataModel::Nullable<uint32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int32u", 1, value);
        }
        case TestCluster::Attributes::NullableInt40u::Id: {
            chip::app::DataModel::Nullable<uint64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int40u", 1, value);
        }
        case TestCluster::Attributes::NullableInt48u::Id: {
            chip::app::DataModel::Nullable<uint64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int48u", 1, value);
        }
        case TestCluster::Attributes::NullableInt56u::Id: {
            chip::app::DataModel::Nullable<uint64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int56u", 1, value);
        }
        case TestCluster::Attributes::NullableInt64u::Id: {
            chip::app::DataModel::Nullable<uint64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int64u", 1, value);
        }
        case TestCluster::Attributes::NullableInt8s::Id: {
            chip::app::DataModel::Nullable<int8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int8s", 1, value);
        }
        case TestCluster::Attributes::NullableInt16s::Id: {
            chip::app::DataModel::Nullable<int16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int16s", 1, value);
        }
        case TestCluster::Attributes::NullableInt24s::Id: {
            chip::app::DataModel::Nullable<int32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int24s", 1, value);
        }
        case TestCluster::Attributes::NullableInt32s::Id: {
            chip::app::DataModel::Nullable<int32_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int32s", 1, value);
        }
        case TestCluster::Attributes::NullableInt40s::Id: {
            chip::app::DataModel::Nullable<int64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int40s", 1, value);
        }
        case TestCluster::Attributes::NullableInt48s::Id: {
            chip::app::DataModel::Nullable<int64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int48s", 1, value);
        }
        case TestCluster::Attributes::NullableInt56s::Id: {
            chip::app::DataModel::Nullable<int64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int56s", 1, value);
        }
        case TestCluster::Attributes::NullableInt64s::Id: {
            chip::app::DataModel::Nullable<int64_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_int64s", 1, value);
        }
        case TestCluster::Attributes::NullableEnum8::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_enum8", 1, value);
        }
        case TestCluster::Attributes::NullableEnum16::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_enum16", 1, value);
        }
        case TestCluster::Attributes::NullableFloatSingle::Id: {
            chip::app::DataModel::Nullable<float> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_float_single", 1, value);
        }
        case TestCluster::Attributes::NullableFloatDouble::Id: {
            chip::app::DataModel::Nullable<double> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_float_double", 1, value);
        }
        case TestCluster::Attributes::NullableOctetString::Id: {
            chip::app::DataModel::Nullable<chip::ByteSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_octet_string", 1, value);
        }
        case TestCluster::Attributes::NullableCharString::Id: {
            chip::app::DataModel::Nullable<chip::CharSpan> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_char_string", 1, value);
        }
        case TestCluster::Attributes::NullableEnumAttr::Id: {
            chip::app::DataModel::Nullable<chip::app::Clusters::TestCluster::SimpleEnum> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_enum_attr", 1, value);
        }
        case TestCluster::Attributes::NullableStruct::Id: {
            chip::app::DataModel::Nullable<chip::app::Clusters::TestCluster::Structs::SimpleStruct::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_struct", 1, value);
        }
        case TestCluster::Attributes::NullableRangeRestrictedInt8u::Id: {
            chip::app::DataModel::Nullable<uint8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_range_restricted_int8u", 1, value);
        }
        case TestCluster::Attributes::NullableRangeRestrictedInt8s::Id: {
            chip::app::DataModel::Nullable<int8_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_range_restricted_int8s", 1, value);
        }
        case TestCluster::Attributes::NullableRangeRestrictedInt16u::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_range_restricted_int16u", 1, value);
        }
        case TestCluster::Attributes::NullableRangeRestrictedInt16s::Id: {
            chip::app::DataModel::Nullable<int16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("nullable_range_restricted_int16s", 1, value);
        }
        case TestCluster::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case TestCluster::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case Thermostat::Id: {
        switch (path.mAttributeId)
        {
        case Thermostat::Attributes::LocalTemperature::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("local temperature", 1, value);
        }
        case Thermostat::Attributes::AbsMinHeatSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("abs min heat setpoint limit", 1, value);
        }
        case Thermostat::Attributes::AbsMaxHeatSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("abs max heat setpoint limit", 1, value);
        }
        case Thermostat::Attributes::AbsMinCoolSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("abs min cool setpoint limit", 1, value);
        }
        case Thermostat::Attributes::AbsMaxCoolSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("abs max cool setpoint limit", 1, value);
        }
        case Thermostat::Attributes::OccupiedCoolingSetpoint::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("occupied cooling setpoint", 1, value);
        }
        case Thermostat::Attributes::OccupiedHeatingSetpoint::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("occupied heating setpoint", 1, value);
        }
        case Thermostat::Attributes::MinHeatSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min heat setpoint limit", 1, value);
        }
        case Thermostat::Attributes::MaxHeatSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("max heat setpoint limit", 1, value);
        }
        case Thermostat::Attributes::MinCoolSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min cool setpoint limit", 1, value);
        }
        case Thermostat::Attributes::MaxCoolSetpointLimit::Id: {
            int16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("max cool setpoint limit", 1, value);
        }
        case Thermostat::Attributes::MinSetpointDeadBand::Id: {
            int8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("min setpoint dead band", 1, value);
        }
        case Thermostat::Attributes::ControlSequenceOfOperation::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("control sequence of operation", 1, value);
        }
        case Thermostat::Attributes::SystemMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("system mode", 1, value);
        }
        case Thermostat::Attributes::StartOfWeek::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("start of week", 1, value);
        }
        case Thermostat::Attributes::NumberOfWeeklyTransitions::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("number of weekly transitions", 1, value);
        }
        case Thermostat::Attributes::NumberOfDailyTransitions::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("number of daily transitions", 1, value);
        }
        case Thermostat::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case Thermostat::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case Thermostat::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ThermostatUserInterfaceConfiguration::Id: {
        switch (path.mAttributeId)
        {
        case ThermostatUserInterfaceConfiguration::Attributes::TemperatureDisplayMode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("temperature display mode", 1, value);
        }
        case ThermostatUserInterfaceConfiguration::Attributes::KeypadLockout::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("keypad lockout", 1, value);
        }
        case ThermostatUserInterfaceConfiguration::Attributes::ScheduleProgrammingVisibility::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("schedule programming visibility", 1, value);
        }
        case ThermostatUserInterfaceConfiguration::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ThermostatUserInterfaceConfiguration::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case ThreadNetworkDiagnostics::Id: {
        switch (path.mAttributeId)
        {
        case ThreadNetworkDiagnostics::Attributes::Channel::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("channel", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RoutingRole::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RoutingRole", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::NetworkName::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NetworkName", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::PanId::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PanId", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ExtendedPanId::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ExtendedPanId", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::MeshLocalPrefix::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MeshLocalPrefix", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::OverrunCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OverrunCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::NeighborTableList::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NeighborTableList", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RouteTableList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RouteTableList", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::PartitionId::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PartitionId", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::Weighting::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("weighting", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::DataVersion::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DataVersion", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::StableDataVersion::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StableDataVersion", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::LeaderRouterId::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LeaderRouterId", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::DetachedRoleCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DetachedRoleCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ChildRoleCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ChildRoleCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RouterRoleCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RouterRoleCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::LeaderRoleCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LeaderRoleCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::AttachAttemptCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttachAttemptCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::PartitionIdChangeCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PartitionIdChangeCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::BetterPartitionAttachAttemptCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BetterPartitionAttachAttemptCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ParentChangeCount::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ParentChangeCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxTotalCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxTotalCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxUnicastCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxUnicastCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxBroadcastCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxBroadcastCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxAckRequestedCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxAckRequestedCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxAckedCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxAckedCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxNoAckRequestedCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxNoAckRequestedCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxDataCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxDataCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxDataPollCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxDataPollCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxBeaconCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxBeaconCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxBeaconRequestCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxBeaconRequestCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxOtherCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxOtherCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxRetryCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxRetryCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxDirectMaxRetryExpiryCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxDirectMaxRetryExpiryCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxIndirectMaxRetryExpiryCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxIndirectMaxRetryExpiryCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxErrCcaCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxErrCcaCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxErrAbortCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxErrAbortCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::TxErrBusyChannelCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TxErrBusyChannelCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxTotalCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxTotalCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxUnicastCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxUnicastCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxBroadcastCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxBroadcastCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxDataCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxDataCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxDataPollCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxDataPollCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxBeaconCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxBeaconCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxBeaconRequestCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxBeaconRequestCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxOtherCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxOtherCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxAddressFilteredCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxAddressFilteredCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxDestAddrFilteredCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxDestAddrFilteredCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxDuplicatedCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxDuplicatedCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrNoFrameCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrNoFrameCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrUnknownNeighborCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrUnknownNeighborCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrInvalidSrcAddrCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrInvalidSrcAddrCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrSecCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrSecCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrFcsCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrFcsCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::RxErrOtherCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RxErrOtherCount", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ActiveTimestamp::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveTimestamp", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::PendingTimestamp::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PendingTimestamp", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::Delay::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("delay", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::SecurityPolicy::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SecurityPolicy", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ChannelMask::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ChannelMask", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::OperationalDatasetComponents::Id: {
            chip::app::DataModel::DecodableList<
                chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::DecodableType>
                value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OperationalDatasetComponents", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ActiveNetworkFaultsList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::ThreadNetworkDiagnostics::NetworkFault> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActiveNetworkFaultsList", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case ThreadNetworkDiagnostics::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case UserLabel::Id: {
        switch (path.mAttributeId)
        {
        case UserLabel::Attributes::LabelList::Id: {
            chip::app::DataModel::DecodableList<chip::app::Clusters::UserLabel::Structs::LabelStruct::DecodableType> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("label list", 1, value);
        }
        case UserLabel::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case WakeOnLan::Id: {
        switch (path.mAttributeId)
        {
        case WakeOnLan::Attributes::WakeOnLanMacAddress::Id: {
            chip::CharSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("wake on lan mac address", 1, value);
        }
        case WakeOnLan::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case WakeOnLan::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case WiFiNetworkDiagnostics::Id: {
        switch (path.mAttributeId)
        {
        case WiFiNetworkDiagnostics::Attributes::Bssid::Id: {
            chip::ByteSpan value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("bssid", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::SecurityType::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SecurityType", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::WiFiVersion::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("WiFiVersion", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::ChannelNumber::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ChannelNumber", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::Rssi::Id: {
            int8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Rssi", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::BeaconLostCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BeaconLostCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::BeaconRxCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BeaconRxCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::PacketMulticastRxCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketMulticastRxCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::PacketMulticastTxCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketMulticastTxCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::PacketUnicastRxCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketUnicastRxCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::PacketUnicastTxCount::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PacketUnicastTxCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::CurrentMaxRate::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentMaxRate", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::OverrunCount::Id: {
            uint64_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OverrunCount", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case WiFiNetworkDiagnostics::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    case WindowCovering::Id: {
        switch (path.mAttributeId)
        {
        case WindowCovering::Attributes::Type::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Type", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionLift::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionLift", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionTilt::Id: {
            chip::app::DataModel::Nullable<uint16_t> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionTilt", 1, value);
        }
        case WindowCovering::Attributes::ConfigStatus::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ConfigStatus", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionLiftPercentage::Id: {
            chip::app::DataModel::Nullable<chip::Percent> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionLiftPercentage", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionTiltPercentage::Id: {
            chip::app::DataModel::Nullable<chip::Percent> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionTiltPercentage", 1, value);
        }
        case WindowCovering::Attributes::OperationalStatus::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OperationalStatus", 1, value);
        }
        case WindowCovering::Attributes::TargetPositionLiftPercent100ths::Id: {
            chip::app::DataModel::Nullable<chip::Percent100ths> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TargetPositionLiftPercent100ths", 1, value);
        }
        case WindowCovering::Attributes::TargetPositionTiltPercent100ths::Id: {
            chip::app::DataModel::Nullable<chip::Percent100ths> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TargetPositionTiltPercent100ths", 1, value);
        }
        case WindowCovering::Attributes::EndProductType::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("EndProductType", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionLiftPercent100ths::Id: {
            chip::app::DataModel::Nullable<chip::Percent100ths> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionLiftPercent100ths", 1, value);
        }
        case WindowCovering::Attributes::CurrentPositionTiltPercent100ths::Id: {
            chip::app::DataModel::Nullable<chip::Percent100ths> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CurrentPositionTiltPercent100ths", 1, value);
        }
        case WindowCovering::Attributes::InstalledOpenLimitLift::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InstalledOpenLimitLift", 1, value);
        }
        case WindowCovering::Attributes::InstalledClosedLimitLift::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InstalledClosedLimitLift", 1, value);
        }
        case WindowCovering::Attributes::InstalledOpenLimitTilt::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InstalledOpenLimitTilt", 1, value);
        }
        case WindowCovering::Attributes::InstalledClosedLimitTilt::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InstalledClosedLimitTilt", 1, value);
        }
        case WindowCovering::Attributes::Mode::Id: {
            uint8_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Mode", 1, value);
        }
        case WindowCovering::Attributes::SafetyStatus::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SafetyStatus", 1, value);
        }
        case WindowCovering::Attributes::AttributeList::Id: {
            chip::app::DataModel::DecodableList<chip::AttributeId> value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttributeList", 1, value);
        }
        case WindowCovering::Attributes::FeatureMap::Id: {
            uint32_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("FeatureMap", 1, value);
        }
        case WindowCovering::Attributes::ClusterRevision::Id: {
            uint16_t value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ClusterRevision", 1, value);
        }
        }
    }
    default:
        return CHIP_NO_ERROR;
    }
}

CHIP_ERROR LogCommand(const chip::app::ConcreteCommandPath & path, chip::TLV::TLVReader * data)
{
    ChipLogProgress(chipTool, "Endpoint: %" PRIu16 " Cluster: " ChipLogFormatMEI " Command " ChipLogFormatMEI, path.mEndpointId,
                    ChipLogValueMEI(path.mClusterId), ChipLogValueMEI(path.mCommandId));

    switch (path.mClusterId)
    {
    case AccountLogin::Id: {
        switch (path.mCommandId)
        {
        case AccountLogin::Commands::GetSetupPINResponse::Id: {
            AccountLogin::Commands::GetSetupPINResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetSetupPINResponse", 1, value);
        }
        }
    }
    case ApplicationLauncher::Id: {
        switch (path.mCommandId)
        {
        case ApplicationLauncher::Commands::LauncherResponse::Id: {
            ApplicationLauncher::Commands::LauncherResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LauncherResponse", 1, value);
        }
        }
    }
    case Channel::Id: {
        switch (path.mCommandId)
        {
        case Channel::Commands::ChangeChannelResponse::Id: {
            Channel::Commands::ChangeChannelResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ChangeChannelResponse", 1, value);
        }
        }
    }
    case ContentLauncher::Id: {
        switch (path.mCommandId)
        {
        case ContentLauncher::Commands::LaunchResponse::Id: {
            ContentLauncher::Commands::LaunchResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LaunchResponse", 1, value);
        }
        }
    }
    case DiagnosticLogs::Id: {
        switch (path.mCommandId)
        {
        case DiagnosticLogs::Commands::RetrieveLogsResponse::Id: {
            DiagnosticLogs::Commands::RetrieveLogsResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RetrieveLogsResponse", 1, value);
        }
        }
    }
    case DoorLock::Id: {
        switch (path.mCommandId)
        {
        case DoorLock::Commands::GetCredentialStatusResponse::Id: {
            DoorLock::Commands::GetCredentialStatusResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetCredentialStatusResponse", 1, value);
        }
        case DoorLock::Commands::GetUserResponse::Id: {
            DoorLock::Commands::GetUserResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetUserResponse", 1, value);
        }
        case DoorLock::Commands::SetCredentialResponse::Id: {
            DoorLock::Commands::SetCredentialResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SetCredentialResponse", 1, value);
        }
        }
    }
    case GeneralCommissioning::Id: {
        switch (path.mCommandId)
        {
        case GeneralCommissioning::Commands::ArmFailSafeResponse::Id: {
            GeneralCommissioning::Commands::ArmFailSafeResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ArmFailSafeResponse", 1, value);
        }
        case GeneralCommissioning::Commands::CommissioningCompleteResponse::Id: {
            GeneralCommissioning::Commands::CommissioningCompleteResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CommissioningCompleteResponse", 1, value);
        }
        case GeneralCommissioning::Commands::SetRegulatoryConfigResponse::Id: {
            GeneralCommissioning::Commands::SetRegulatoryConfigResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SetRegulatoryConfigResponse", 1, value);
        }
        }
    }
    case GroupKeyManagement::Id: {
        switch (path.mCommandId)
        {
        case GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::Id: {
            GroupKeyManagement::Commands::KeySetReadAllIndicesResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("KeySetReadAllIndicesResponse", 1, value);
        }
        case GroupKeyManagement::Commands::KeySetReadResponse::Id: {
            GroupKeyManagement::Commands::KeySetReadResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("KeySetReadResponse", 1, value);
        }
        }
    }
    case Groups::Id: {
        switch (path.mCommandId)
        {
        case Groups::Commands::AddGroupResponse::Id: {
            Groups::Commands::AddGroupResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AddGroupResponse", 1, value);
        }
        case Groups::Commands::GetGroupMembershipResponse::Id: {
            Groups::Commands::GetGroupMembershipResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetGroupMembershipResponse", 1, value);
        }
        case Groups::Commands::RemoveGroupResponse::Id: {
            Groups::Commands::RemoveGroupResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RemoveGroupResponse", 1, value);
        }
        case Groups::Commands::ViewGroupResponse::Id: {
            Groups::Commands::ViewGroupResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ViewGroupResponse", 1, value);
        }
        }
    }
    case Identify::Id: {
        switch (path.mCommandId)
        {
        case Identify::Commands::IdentifyQueryResponse::Id: {
            Identify::Commands::IdentifyQueryResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("IdentifyQueryResponse", 1, value);
        }
        }
    }
    case KeypadInput::Id: {
        switch (path.mCommandId)
        {
        case KeypadInput::Commands::SendKeyResponse::Id: {
            KeypadInput::Commands::SendKeyResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SendKeyResponse", 1, value);
        }
        }
    }
    case MediaPlayback::Id: {
        switch (path.mCommandId)
        {
        case MediaPlayback::Commands::PlaybackResponse::Id: {
            MediaPlayback::Commands::PlaybackResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PlaybackResponse", 1, value);
        }
        }
    }
    case NetworkCommissioning::Id: {
        switch (path.mCommandId)
        {
        case NetworkCommissioning::Commands::ConnectNetworkResponse::Id: {
            NetworkCommissioning::Commands::ConnectNetworkResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ConnectNetworkResponse", 1, value);
        }
        case NetworkCommissioning::Commands::NetworkConfigResponse::Id: {
            NetworkCommissioning::Commands::NetworkConfigResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NetworkConfigResponse", 1, value);
        }
        case NetworkCommissioning::Commands::ScanNetworksResponse::Id: {
            NetworkCommissioning::Commands::ScanNetworksResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ScanNetworksResponse", 1, value);
        }
        }
    }
    case OtaSoftwareUpdateProvider::Id: {
        switch (path.mCommandId)
        {
        case OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::Id: {
            OtaSoftwareUpdateProvider::Commands::ApplyUpdateResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ApplyUpdateResponse", 1, value);
        }
        case OtaSoftwareUpdateProvider::Commands::QueryImageResponse::Id: {
            OtaSoftwareUpdateProvider::Commands::QueryImageResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("QueryImageResponse", 1, value);
        }
        }
    }
    case OperationalCredentials::Id: {
        switch (path.mCommandId)
        {
        case OperationalCredentials::Commands::AttestationResponse::Id: {
            OperationalCredentials::Commands::AttestationResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AttestationResponse", 1, value);
        }
        case OperationalCredentials::Commands::CertificateChainResponse::Id: {
            OperationalCredentials::Commands::CertificateChainResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("CertificateChainResponse", 1, value);
        }
        case OperationalCredentials::Commands::NOCResponse::Id: {
            OperationalCredentials::Commands::NOCResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NOCResponse", 1, value);
        }
        case OperationalCredentials::Commands::OpCSRResponse::Id: {
            OperationalCredentials::Commands::OpCSRResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("OpCSRResponse", 1, value);
        }
        }
    }
    case Scenes::Id: {
        switch (path.mCommandId)
        {
        case Scenes::Commands::AddSceneResponse::Id: {
            Scenes::Commands::AddSceneResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AddSceneResponse", 1, value);
        }
        case Scenes::Commands::GetSceneMembershipResponse::Id: {
            Scenes::Commands::GetSceneMembershipResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetSceneMembershipResponse", 1, value);
        }
        case Scenes::Commands::RemoveAllScenesResponse::Id: {
            Scenes::Commands::RemoveAllScenesResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RemoveAllScenesResponse", 1, value);
        }
        case Scenes::Commands::RemoveSceneResponse::Id: {
            Scenes::Commands::RemoveSceneResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RemoveSceneResponse", 1, value);
        }
        case Scenes::Commands::StoreSceneResponse::Id: {
            Scenes::Commands::StoreSceneResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StoreSceneResponse", 1, value);
        }
        case Scenes::Commands::ViewSceneResponse::Id: {
            Scenes::Commands::ViewSceneResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ViewSceneResponse", 1, value);
        }
        }
    }
    case TargetNavigator::Id: {
        switch (path.mCommandId)
        {
        case TargetNavigator::Commands::NavigateTargetResponse::Id: {
            TargetNavigator::Commands::NavigateTargetResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NavigateTargetResponse", 1, value);
        }
        }
    }
    case TestCluster::Id: {
        switch (path.mCommandId)
        {
        case TestCluster::Commands::BooleanResponse::Id: {
            TestCluster::Commands::BooleanResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BooleanResponse", 1, value);
        }
        case TestCluster::Commands::SimpleStructResponse::Id: {
            TestCluster::Commands::SimpleStructResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SimpleStructResponse", 1, value);
        }
        case TestCluster::Commands::TestAddArgumentsResponse::Id: {
            TestCluster::Commands::TestAddArgumentsResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestAddArgumentsResponse", 1, value);
        }
        case TestCluster::Commands::TestEmitTestEventResponse::Id: {
            TestCluster::Commands::TestEmitTestEventResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestEmitTestEventResponse", 1, value);
        }
        case TestCluster::Commands::TestEnumsResponse::Id: {
            TestCluster::Commands::TestEnumsResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestEnumsResponse", 1, value);
        }
        case TestCluster::Commands::TestListInt8UReverseResponse::Id: {
            TestCluster::Commands::TestListInt8UReverseResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestListInt8UReverseResponse", 1, value);
        }
        case TestCluster::Commands::TestNullableOptionalResponse::Id: {
            TestCluster::Commands::TestNullableOptionalResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestNullableOptionalResponse", 1, value);
        }
        case TestCluster::Commands::TestSpecificResponse::Id: {
            TestCluster::Commands::TestSpecificResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestSpecificResponse", 1, value);
        }
        }
    }
    case Thermostat::Id: {
        switch (path.mCommandId)
        {
        case Thermostat::Commands::GetRelayStatusLogResponse::Id: {
            Thermostat::Commands::GetRelayStatusLogResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetRelayStatusLogResponse", 1, value);
        }
        case Thermostat::Commands::GetWeeklyScheduleResponse::Id: {
            Thermostat::Commands::GetWeeklyScheduleResponse::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GetWeeklyScheduleResponse", 1, value);
        }
        }
    }
    default:
        return CHIP_NO_ERROR;
    }
}

CHIP_ERROR LogEvent(const chip::app::EventHeader & header, chip::TLV::TLVReader * data)
{
    ChipLogProgress(chipTool, "Endpoint: %" PRIu16 " Cluster: " ChipLogFormatMEI " Event " ChipLogFormatMEI,
                    header.mPath.mEndpointId, ChipLogValueMEI(header.mPath.mClusterId), ChipLogValueMEI(header.mPath.mEventId));

    ChipLogProgress(chipTool, "\t Event number: %" PRIu64, header.mEventNumber);

    if (header.mPriorityLevel == chip::app::PriorityLevel::Info)
    {
        ChipLogProgress(chipTool, "\t Priority: Info");
    }
    else if (header.mPriorityLevel == chip::app::PriorityLevel::Critical)
    {
        ChipLogProgress(chipTool, "\t Priority: Critical");
    }
    else if (header.mPriorityLevel == chip::app::PriorityLevel::Debug)
    {
        ChipLogProgress(chipTool, "\t Priority: Debug");
    }
    else
    {
        ChipLogProgress(chipTool, "\t Priority: Unknown");
    }

    ChipLogProgress(chipTool, "\t Timestamp: %" PRIu64, header.mTimestamp.mValue);

    switch (header.mPath.mClusterId)
    {
    case Basic::Id: {
        switch (header.mPath.mEventId)
        {
        case Basic::Events::StartUp::Id: {
            chip::app::Clusters::Basic::Events::StartUp::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StartUp", 1, value);
        }
        case Basic::Events::ShutDown::Id: {
            chip::app::Clusters::Basic::Events::ShutDown::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ShutDown", 1, value);
        }
        case Basic::Events::Leave::Id: {
            chip::app::Clusters::Basic::Events::Leave::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Leave", 1, value);
        }
        case Basic::Events::ReachableChanged::Id: {
            chip::app::Clusters::Basic::Events::ReachableChanged::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ReachableChanged", 1, value);
        }
        }
    }
    case BooleanState::Id: {
        switch (header.mPath.mEventId)
        {
        case BooleanState::Events::StateChange::Id: {
            chip::app::Clusters::BooleanState::Events::StateChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StateChange", 1, value);
        }
        }
    }
    case BridgedActions::Id: {
        switch (header.mPath.mEventId)
        {
        case BridgedActions::Events::StateChanged::Id: {
            chip::app::Clusters::BridgedActions::Events::StateChanged::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StateChanged", 1, value);
        }
        case BridgedActions::Events::ActionFailed::Id: {
            chip::app::Clusters::BridgedActions::Events::ActionFailed::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ActionFailed", 1, value);
        }
        }
    }
    case DoorLock::Id: {
        switch (header.mPath.mEventId)
        {
        case DoorLock::Events::DoorLockAlarm::Id: {
            chip::app::Clusters::DoorLock::Events::DoorLockAlarm::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DoorLockAlarm", 1, value);
        }
        case DoorLock::Events::DoorStateChange::Id: {
            chip::app::Clusters::DoorLock::Events::DoorStateChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DoorStateChange", 1, value);
        }
        case DoorLock::Events::LockOperation::Id: {
            chip::app::Clusters::DoorLock::Events::LockOperation::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LockOperation", 1, value);
        }
        case DoorLock::Events::LockOperationError::Id: {
            chip::app::Clusters::DoorLock::Events::LockOperationError::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LockOperationError", 1, value);
        }
        case DoorLock::Events::LockUserChange::Id: {
            chip::app::Clusters::DoorLock::Events::LockUserChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LockUserChange", 1, value);
        }
        }
    }
    case GeneralDiagnostics::Id: {
        switch (header.mPath.mEventId)
        {
        case GeneralDiagnostics::Events::HardwareFaultChange::Id: {
            chip::app::Clusters::GeneralDiagnostics::Events::HardwareFaultChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("HardwareFaultChange", 1, value);
        }
        case GeneralDiagnostics::Events::RadioFaultChange::Id: {
            chip::app::Clusters::GeneralDiagnostics::Events::RadioFaultChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("RadioFaultChange", 1, value);
        }
        case GeneralDiagnostics::Events::NetworkFaultChange::Id: {
            chip::app::Clusters::GeneralDiagnostics::Events::NetworkFaultChange::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("NetworkFaultChange", 1, value);
        }
        case GeneralDiagnostics::Events::BootReason::Id: {
            chip::app::Clusters::GeneralDiagnostics::Events::BootReason::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("BootReason", 1, value);
        }
        }
    }
    case OtaSoftwareUpdateRequestor::Id: {
        switch (header.mPath.mEventId)
        {
        case OtaSoftwareUpdateRequestor::Events::StateTransition::Id: {
            chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::StateTransition::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("StateTransition", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Events::VersionApplied::Id: {
            chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::VersionApplied::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("VersionApplied", 1, value);
        }
        case OtaSoftwareUpdateRequestor::Events::DownloadError::Id: {
            chip::app::Clusters::OtaSoftwareUpdateRequestor::Events::DownloadError::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DownloadError", 1, value);
        }
        }
    }
    case PumpConfigurationAndControl::Id: {
        switch (header.mPath.mEventId)
        {
        case PumpConfigurationAndControl::Events::SupplyVoltageLow::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageLow::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupplyVoltageLow", 1, value);
        }
        case PumpConfigurationAndControl::Events::SupplyVoltageHigh::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::SupplyVoltageHigh::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SupplyVoltageHigh", 1, value);
        }
        case PumpConfigurationAndControl::Events::PowerMissingPhase::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::PowerMissingPhase::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PowerMissingPhase", 1, value);
        }
        case PumpConfigurationAndControl::Events::SystemPressureLow::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureLow::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SystemPressureLow", 1, value);
        }
        case PumpConfigurationAndControl::Events::SystemPressureHigh::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::SystemPressureHigh::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SystemPressureHigh", 1, value);
        }
        case PumpConfigurationAndControl::Events::DryRunning::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::DryRunning::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("DryRunning", 1, value);
        }
        case PumpConfigurationAndControl::Events::MotorTemperatureHigh::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::MotorTemperatureHigh::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MotorTemperatureHigh", 1, value);
        }
        case PumpConfigurationAndControl::Events::PumpMotorFatalFailure::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::PumpMotorFatalFailure::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PumpMotorFatalFailure", 1, value);
        }
        case PumpConfigurationAndControl::Events::ElectronicTemperatureHigh::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicTemperatureHigh::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ElectronicTemperatureHigh", 1, value);
        }
        case PumpConfigurationAndControl::Events::PumpBlocked::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::PumpBlocked::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("PumpBlocked", 1, value);
        }
        case PumpConfigurationAndControl::Events::SensorFailure::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::SensorFailure::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SensorFailure", 1, value);
        }
        case PumpConfigurationAndControl::Events::ElectronicNonFatalFailure::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicNonFatalFailure::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ElectronicNonFatalFailure", 1, value);
        }
        case PumpConfigurationAndControl::Events::ElectronicFatalFailure::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::ElectronicFatalFailure::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ElectronicFatalFailure", 1, value);
        }
        case PumpConfigurationAndControl::Events::GeneralFault::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::GeneralFault::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("GeneralFault", 1, value);
        }
        case PumpConfigurationAndControl::Events::Leakage::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::Leakage::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Leakage", 1, value);
        }
        case PumpConfigurationAndControl::Events::AirDetection::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::AirDetection::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AirDetection", 1, value);
        }
        case PumpConfigurationAndControl::Events::TurbineOperation::Id: {
            chip::app::Clusters::PumpConfigurationAndControl::Events::TurbineOperation::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TurbineOperation", 1, value);
        }
        }
    }
    case SoftwareDiagnostics::Id: {
        switch (header.mPath.mEventId)
        {
        case SoftwareDiagnostics::Events::SoftwareFault::Id: {
            chip::app::Clusters::SoftwareDiagnostics::Events::SoftwareFault::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SoftwareFault", 1, value);
        }
        }
    }
    case Switch::Id: {
        switch (header.mPath.mEventId)
        {
        case Switch::Events::SwitchLatched::Id: {
            chip::app::Clusters::Switch::Events::SwitchLatched::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("SwitchLatched", 1, value);
        }
        case Switch::Events::InitialPress::Id: {
            chip::app::Clusters::Switch::Events::InitialPress::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("InitialPress", 1, value);
        }
        case Switch::Events::LongPress::Id: {
            chip::app::Clusters::Switch::Events::LongPress::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LongPress", 1, value);
        }
        case Switch::Events::ShortRelease::Id: {
            chip::app::Clusters::Switch::Events::ShortRelease::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ShortRelease", 1, value);
        }
        case Switch::Events::LongRelease::Id: {
            chip::app::Clusters::Switch::Events::LongRelease::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("LongRelease", 1, value);
        }
        case Switch::Events::MultiPressOngoing::Id: {
            chip::app::Clusters::Switch::Events::MultiPressOngoing::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MultiPressOngoing", 1, value);
        }
        case Switch::Events::MultiPressComplete::Id: {
            chip::app::Clusters::Switch::Events::MultiPressComplete::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("MultiPressComplete", 1, value);
        }
        }
    }
    case TestCluster::Id: {
        switch (header.mPath.mEventId)
        {
        case TestCluster::Events::TestEvent::Id: {
            chip::app::Clusters::TestCluster::Events::TestEvent::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("TestEvent", 1, value);
        }
        }
    }
    case ThreadNetworkDiagnostics::Id: {
        switch (header.mPath.mEventId)
        {
        case ThreadNetworkDiagnostics::Events::ConnectionStatus::Id: {
            chip::app::Clusters::ThreadNetworkDiagnostics::Events::ConnectionStatus::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ConnectionStatus", 1, value);
        }
        }
    }
    case WiFiNetworkDiagnostics::Id: {
        switch (header.mPath.mEventId)
        {
        case WiFiNetworkDiagnostics::Events::Disconnection::Id: {
            chip::app::Clusters::WiFiNetworkDiagnostics::Events::Disconnection::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("Disconnection", 1, value);
        }
        case WiFiNetworkDiagnostics::Events::AssociationFailure::Id: {
            chip::app::Clusters::WiFiNetworkDiagnostics::Events::AssociationFailure::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("AssociationFailure", 1, value);
        }
        case WiFiNetworkDiagnostics::Events::ConnectionStatus::Id: {
            chip::app::Clusters::WiFiNetworkDiagnostics::Events::ConnectionStatus::DecodableType value;
            ReturnErrorOnFailure(chip::app::DataModel::Decode(*data, value));
            return LogValue("ConnectionStatus", 1, value);
        }
        }
    }
    default:
        return CHIP_NO_ERROR;
    }
}
