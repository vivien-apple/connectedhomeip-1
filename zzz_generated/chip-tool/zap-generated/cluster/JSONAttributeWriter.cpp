/*
 *
 *    Copyright (c) 2021 Project CHIP Authors
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *        http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */

// THIS FILE IS GENERATED BY ZAP

#include <commands/clusters/WriteAttributeFromJSON.h>

#include <app/data-model/List.h>
#include <app/data-model/Nullable.h>
#include <json/json.h>
#include <lib/core/Optional.h>
#include <lib/support/BytesToHex.h>
#include <lib/support/SafeInt.h>

#define kMaxLabelLength 100

class RequestEncoder
{
public:
    template <typename T>
    static bool IsOptionalParameter(chip::Optional<T> & request)
    {
        return true;
    }

    template <typename T>
    static bool IsOptionalParameter(T & request)
    {
        return false;
    }

    static CHIP_ERROR PrepareRequest(const char * label, uint8_t & request, Json::Value value)
    {
        if (!value.isNumeric() || !chip::CanCastTo<uint8_t>(value.asLargestUInt()))
        {
            ChipLogError(chipTool, "Error while encoding %s as an unsigned integer.", label);
            return CHIP_ERROR_INVALID_ARGUMENT;
        }

        request = static_cast<uint8_t>(value.asUInt());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, uint16_t & request, Json::Value value)
    {
        if (!value.isNumeric() || !chip::CanCastTo<uint16_t>(value.asLargestUInt()))
        {
            ChipLogError(chipTool, "Error while encoding %s as an unsigned integer.", label);
            return CHIP_ERROR_INVALID_ARGUMENT;
        }

        request = static_cast<uint16_t>(value.asUInt());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, uint32_t & request, Json::Value value)
    {
        if (!value.isNumeric() || !chip::CanCastTo<uint32_t>(value.asLargestUInt()))
        {
            ChipLogError(chipTool, "Error while encoding %s as an unsigned integer.", label);
            return CHIP_ERROR_INVALID_ARGUMENT;
        }

        request = static_cast<uint32_t>(value.asUInt());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, uint64_t & request, Json::Value value)
    {
        if (!value.isNumeric() || !chip::CanCastTo<uint64_t>(value.asLargestUInt()))
        {
            ChipLogError(chipTool, "Error while encoding %s as an unsigned integer.", label);
            return CHIP_ERROR_INVALID_ARGUMENT;
        }

        request = static_cast<uint64_t>(value.asUInt());
        return CHIP_NO_ERROR;
    }

    template <typename T, std::enable_if_t<std::is_signed<T>::value, bool> = true>
    static CHIP_ERROR PrepareRequest(const char * label, T & request, Json::Value value)
    {
        VerifyOrReturnError(value.isIntegral(), CHIP_ERROR_INVALID_ARGUMENT);
        VerifyOrReturnError(chip::CanCastTo<T>(value.asLargestInt()), CHIP_ERROR_INVALID_ARGUMENT);

        request = static_cast<T>(value.asInt());
        return CHIP_NO_ERROR;
    }

    template <typename T, typename std::enable_if_t<std::is_enum<T>::value, int> = 0>
    static CHIP_ERROR PrepareRequest(const char * label, T & request, Json::Value value)
    {
        std::underlying_type_t<T> requestValue;
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(label, requestValue, value));

        request = static_cast<T>(requestValue);
        return CHIP_NO_ERROR;
    }

    template <typename T>
    static CHIP_ERROR PrepareRequest(const char * label, chip::BitFlags<T> & request, Json::Value & value)
    {
        T requestValue;
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(label, requestValue, value));

        request = chip::BitFlags<T>(requestValue);
        return CHIP_NO_ERROR;
    }

    template <typename T>
    static CHIP_ERROR PrepareRequest(const char * label, chip::Optional<T> & request, Json::Value & value)
    {
        T requestValue;
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(label, requestValue, value));

        request = chip::Optional<T>(requestValue);
        return CHIP_NO_ERROR;
    }

    template <typename T>
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::DataModel::Nullable<T> & request, Json::Value & value)
    {
        if (value.isNull())
        {
            request.SetNull();
            return CHIP_NO_ERROR;
        }

        T requestValue;
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(label, requestValue, value));

        request = chip::app::DataModel::Nullable<T>(requestValue);
        return CHIP_NO_ERROR;
    }

    template <typename T>
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::DataModel::List<T> & request, Json::Value & value)
    {
        VerifyOrReturnError(value.type() == Json::arrayValue, CHIP_ERROR_INVALID_ARGUMENT);

        auto content = static_cast<typename std::remove_const<T>::type *>(chip::Platform::MemoryCalloc(value.size(), sizeof(T)));

        Json::ArrayIndex size = value.size();
        for (Json::ArrayIndex i = 0; i < size; i++)
        {
            char labelWithIndex[kMaxLabelLength];
            snprintf(labelWithIndex, sizeof(labelWithIndex), "%s[%d]", label, i);
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithIndex, content[i], value[i]));
        }

        request = chip::app::DataModel::List<T>(content, value.size());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, chip::ByteSpan & request, Json::Value & value)
    {
        VerifyOrReturnError(value.isString(), CHIP_ERROR_INVALID_ARGUMENT);
        VerifyOrReturnError(strlen(value.asCString()) % 2 == 0, CHIP_ERROR_INVALID_STRING_LENGTH);

        size_t size       = strlen(value.asCString());
        auto buffer       = static_cast<uint8_t *>(chip::Platform::MemoryCalloc(size / 2, sizeof(uint8_t)));
        size_t octetCount = chip::Encoding::HexToBytes(value.asCString(), size, buffer, size / 2);

        request = chip::ByteSpan(buffer, octetCount);
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, chip::CharSpan & request, Json::Value & value)
    {
        VerifyOrReturnError(value.isString(), CHIP_ERROR_INVALID_ARGUMENT);

        size_t size = strlen(value.asCString());
        auto buffer = static_cast<char *>(chip::Platform::MemoryCalloc(size, sizeof(char)));
        strncpy(buffer, value.asCString(), size);

        request = chip::CharSpan(buffer, size);
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, float & request, Json::Value & value)
    {
        VerifyOrReturnError(value.isNumeric(), CHIP_ERROR_INVALID_ARGUMENT);

        request = static_cast<float>(value.asFloat());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, double & request, Json::Value & value)
    {
        VerifyOrReturnError(value.isNumeric(), CHIP_ERROR_INVALID_ARGUMENT);

        request = static_cast<double>(value.asDouble());
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR PrepareRequest(const char * label, bool & request, Json::Value & value)
    {
        VerifyOrReturnError(value.isBool(), CHIP_ERROR_INVALID_ARGUMENT);
        VerifyOrReturnError(chip::CanCastTo<bool>(value.asBool()), CHIP_ERROR_INVALID_ARGUMENT);

        request = value.asBool();
        return CHIP_NO_ERROR;
    }

    static CHIP_ERROR EnsureMemberExist(const char * label, bool hasMember)
    {
        if (hasMember)
        {
            return CHIP_NO_ERROR;
        }

        ChipLogError(chipTool, "%s is required.", label);
        return CHIP_ERROR_INVALID_ARGUMENT;
    }

    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::detail::Structs::LabelStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LabelStruct.label", value.isMember("label")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LabelStruct.value", value.isMember("value")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "label");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.label, value["label"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "value");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.value, value["value"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::detail::Structs::LabelStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.label);
        RequestEncoder::FinalizeRequest(request.value);
    }

    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::Scenes::Structs::SceneExtensionFieldSet::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SceneExtensionFieldSet.clusterId", value.isMember("clusterId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SceneExtensionFieldSet.length", value.isMember("length")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SceneExtensionFieldSet.value", value.isMember("value")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "clusterId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.clusterId, value["clusterId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "length");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.length, value["length"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "value");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.value, value["value"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::Scenes::Structs::SceneExtensionFieldSet::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.clusterId);
        RequestEncoder::FinalizeRequest(request.length);
        RequestEncoder::FinalizeRequest(request.value);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::PowerProfile::Structs::PowerProfileRecord::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("PowerProfileRecord.powerProfileId", value.isMember("powerProfileId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("PowerProfileRecord.energyPhaseId", value.isMember("energyPhaseId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("PowerProfileRecord.powerProfileRemoteControl",
                                                               value.isMember("powerProfileRemoteControl")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("PowerProfileRecord.powerProfileState", value.isMember("powerProfileState")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "powerProfileId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.powerProfileId, value["powerProfileId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "energyPhaseId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.energyPhaseId, value["energyPhaseId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "powerProfileRemoteControl");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.powerProfileRemoteControl, value["powerProfileRemoteControl"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "powerProfileState");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.powerProfileState, value["powerProfileState"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::PowerProfile::Structs::PowerProfileRecord::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.powerProfileId);
        RequestEncoder::FinalizeRequest(request.energyPhaseId);
        RequestEncoder::FinalizeRequest(request.powerProfileRemoteControl);
        RequestEncoder::FinalizeRequest(request.powerProfileState);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::PowerProfile::Structs::ScheduledPhase::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ScheduledPhase.energyPhaseId", value.isMember("energyPhaseId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ScheduledPhase.scheduledTime", value.isMember("scheduledTime")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "energyPhaseId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.energyPhaseId, value["energyPhaseId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "scheduledTime");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.scheduledTime, value["scheduledTime"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::PowerProfile::Structs::ScheduledPhase::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.energyPhaseId);
        RequestEncoder::FinalizeRequest(request.scheduledTime);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::PowerProfile::Structs::TransferredPhase::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TransferredPhase.energyPhaseId", value.isMember("energyPhaseId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TransferredPhase.macroPhaseId", value.isMember("macroPhaseId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("TransferredPhase.expectedDuration", value.isMember("expectedDuration")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TransferredPhase.peakPower", value.isMember("peakPower")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TransferredPhase.energy", value.isMember("energy")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("TransferredPhase.maxActivationDelay", value.isMember("maxActivationDelay")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "energyPhaseId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.energyPhaseId, value["energyPhaseId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "macroPhaseId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.macroPhaseId, value["macroPhaseId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "expectedDuration");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.expectedDuration, value["expectedDuration"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "peakPower");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.peakPower, value["peakPower"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "energy");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.energy, value["energy"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "maxActivationDelay");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.maxActivationDelay, value["maxActivationDelay"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::PowerProfile::Structs::TransferredPhase::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.energyPhaseId);
        RequestEncoder::FinalizeRequest(request.macroPhaseId);
        RequestEncoder::FinalizeRequest(request.expectedDuration);
        RequestEncoder::FinalizeRequest(request.peakPower);
        RequestEncoder::FinalizeRequest(request.energy);
        RequestEncoder::FinalizeRequest(request.maxActivationDelay);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::Descriptor::Structs::DeviceType::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("DeviceType.type", value.isMember("type")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("DeviceType.revision", value.isMember("revision")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "type");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.type, value["type"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "revision");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.revision, value["revision"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::Descriptor::Structs::DeviceType::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.type);
        RequestEncoder::FinalizeRequest(request.revision);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::AccessControl::Structs::Target::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Target.cluster", value.isMember("cluster")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Target.endpoint", value.isMember("endpoint")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Target.deviceType", value.isMember("deviceType")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "cluster");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.cluster, value["cluster"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpoint");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpoint, value["endpoint"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "deviceType");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.deviceType, value["deviceType"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::AccessControl::Structs::Target::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.cluster);
        RequestEncoder::FinalizeRequest(request.endpoint);
        RequestEncoder::FinalizeRequest(request.deviceType);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::AccessControl::Structs::AccessControlEntry::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AccessControlEntry.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AccessControlEntry.privilege", value.isMember("privilege")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AccessControlEntry.authMode", value.isMember("authMode")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AccessControlEntry.subjects", value.isMember("subjects")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AccessControlEntry.targets", value.isMember("targets")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "privilege");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.privilege, value["privilege"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "authMode");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.authMode, value["authMode"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "subjects");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.subjects, value["subjects"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "targets");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.targets, value["targets"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::AccessControl::Structs::AccessControlEntry::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.privilege);
        RequestEncoder::FinalizeRequest(request.authMode);
        RequestEncoder::FinalizeRequest(request.subjects);
        RequestEncoder::FinalizeRequest(request.targets);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::AccessControl::Structs::ExtensionEntry::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ExtensionEntry.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ExtensionEntry.data", value.isMember("data")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "data");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.data, value["data"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::AccessControl::Structs::ExtensionEntry::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.data);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::BridgedActions::Structs::ActionStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ActionStruct.actionID", value.isMember("actionID")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ActionStruct.name", value.isMember("name")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ActionStruct.type", value.isMember("type")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ActionStruct.endpointListID", value.isMember("endpointListID")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ActionStruct.supportedCommands", value.isMember("supportedCommands")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ActionStruct.status", value.isMember("status")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "actionID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.actionID, value["actionID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "type");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.type, value["type"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpointListID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpointListID, value["endpointListID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "supportedCommands");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.supportedCommands, value["supportedCommands"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "status");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.status, value["status"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::BridgedActions::Structs::ActionStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.actionID);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.type);
        RequestEncoder::FinalizeRequest(request.endpointListID);
        RequestEncoder::FinalizeRequest(request.supportedCommands);
        RequestEncoder::FinalizeRequest(request.status);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("EndpointListStruct.endpointListID", value.isMember("endpointListID")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("EndpointListStruct.name", value.isMember("name")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("EndpointListStruct.type", value.isMember("type")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("EndpointListStruct.endpoints", value.isMember("endpoints")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpointListID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpointListID, value["endpointListID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "type");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.type, value["type"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpoints");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpoints, value["endpoints"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::BridgedActions::Structs::EndpointListStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.endpointListID);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.type);
        RequestEncoder::FinalizeRequest(request.endpoints);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ProviderLocation.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ProviderLocation.providerNodeID", value.isMember("providerNodeID")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ProviderLocation.endpoint", value.isMember("endpoint")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "providerNodeID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.providerNodeID, value["providerNodeID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpoint");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpoint, value["endpoint"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.providerNodeID);
        RequestEncoder::FinalizeRequest(request.endpoint);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BasicCommissioningInfoType.failSafeExpiryLengthMs",
                                                               value.isMember("failSafeExpiryLengthMs")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "failSafeExpiryLengthMs");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.failSafeExpiryLengthMs, value["failSafeExpiryLengthMs"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::GeneralCommissioning::Structs::BasicCommissioningInfoType::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.failSafeExpiryLengthMs);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInfo.networkID", value.isMember("networkID")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInfo.connected", value.isMember("connected")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "networkID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.networkID, value["networkID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "connected");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.connected, value["connected"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::NetworkCommissioning::Structs::NetworkInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.networkID);
        RequestEncoder::FinalizeRequest(request.connected);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::NetworkCommissioning::Structs::ThreadInterfaceScanResult::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.panId", value.isMember("panId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.extendedPanId", value.isMember("extendedPanId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.networkName", value.isMember("networkName")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.channel", value.isMember("channel")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.version", value.isMember("version")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.extendedAddress", value.isMember("extendedAddress")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.rssi", value.isMember("rssi")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadInterfaceScanResult.lqi", value.isMember("lqi")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "panId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.panId, value["panId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "extendedPanId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.extendedPanId, value["extendedPanId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "networkName");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.networkName, value["networkName"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "channel");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.channel, value["channel"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "version");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.version, value["version"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "extendedAddress");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.extendedAddress, value["extendedAddress"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rssi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rssi, value["rssi"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "lqi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.lqi, value["lqi"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::NetworkCommissioning::Structs::ThreadInterfaceScanResult::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.panId);
        RequestEncoder::FinalizeRequest(request.extendedPanId);
        RequestEncoder::FinalizeRequest(request.networkName);
        RequestEncoder::FinalizeRequest(request.channel);
        RequestEncoder::FinalizeRequest(request.version);
        RequestEncoder::FinalizeRequest(request.extendedAddress);
        RequestEncoder::FinalizeRequest(request.rssi);
        RequestEncoder::FinalizeRequest(request.lqi);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::NetworkCommissioning::Structs::WiFiInterfaceScanResult::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.security", value.isMember("security")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.ssid", value.isMember("ssid")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.bssid", value.isMember("bssid")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.channel", value.isMember("channel")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.wiFiBand", value.isMember("wiFiBand")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("WiFiInterfaceScanResult.rssi", value.isMember("rssi")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "security");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.security, value["security"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "ssid");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.ssid, value["ssid"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "bssid");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.bssid, value["bssid"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "channel");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.channel, value["channel"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "wiFiBand");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.wiFiBand, value["wiFiBand"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rssi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rssi, value["rssi"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::NetworkCommissioning::Structs::WiFiInterfaceScanResult::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.security);
        RequestEncoder::FinalizeRequest(request.ssid);
        RequestEncoder::FinalizeRequest(request.bssid);
        RequestEncoder::FinalizeRequest(request.channel);
        RequestEncoder::FinalizeRequest(request.wiFiBand);
        RequestEncoder::FinalizeRequest(request.rssi);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInterfaceType.name", value.isMember("name")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NetworkInterfaceType.fabricConnected", value.isMember("fabricConnected")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInterfaceType.offPremiseServicesReachableIPv4",
                                                               value.isMember("offPremiseServicesReachableIPv4")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInterfaceType.offPremiseServicesReachableIPv6",
                                                               value.isMember("offPremiseServicesReachableIPv6")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NetworkInterfaceType.hardwareAddress", value.isMember("hardwareAddress")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NetworkInterfaceType.type", value.isMember("type")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricConnected");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricConnected, value["fabricConnected"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "offPremiseServicesReachableIPv4");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.offPremiseServicesReachableIPv4,
                                                            value["offPremiseServicesReachableIPv4"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "offPremiseServicesReachableIPv6");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.offPremiseServicesReachableIPv6,
                                                            value["offPremiseServicesReachableIPv6"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "hardwareAddress");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.hardwareAddress, value["hardwareAddress"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "type");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.type, value["type"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::GeneralDiagnostics::Structs::NetworkInterfaceType::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.fabricConnected);
        RequestEncoder::FinalizeRequest(request.offPremiseServicesReachableIPv4);
        RequestEncoder::FinalizeRequest(request.offPremiseServicesReachableIPv6);
        RequestEncoder::FinalizeRequest(request.hardwareAddress);
        RequestEncoder::FinalizeRequest(request.type);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::SoftwareDiagnostics::Structs::SoftwareFaultStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SoftwareFaultStruct.id", value.isMember("id")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SoftwareFaultStruct.name", value.isMember("name")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("SoftwareFaultStruct.faultRecording", value.isMember("faultRecording")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "id");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.id, value["id"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "faultRecording");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.faultRecording, value["faultRecording"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::SoftwareDiagnostics::Structs::SoftwareFaultStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.id);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.faultRecording);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadMetrics.id", value.isMember("id")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadMetrics.name", value.isMember("name")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ThreadMetrics.stackFreeCurrent", value.isMember("stackFreeCurrent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ThreadMetrics.stackFreeMinimum", value.isMember("stackFreeMinimum")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ThreadMetrics.stackSize", value.isMember("stackSize")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "id");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.id, value["id"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "stackFreeCurrent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.stackFreeCurrent, value["stackFreeCurrent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "stackFreeMinimum");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.stackFreeMinimum, value["stackFreeMinimum"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "stackSize");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.stackSize, value["stackSize"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::SoftwareDiagnostics::Structs::ThreadMetrics::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.id);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.stackFreeCurrent);
        RequestEncoder::FinalizeRequest(request.stackFreeMinimum);
        RequestEncoder::FinalizeRequest(request.stackSize);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.extAddress", value.isMember("extAddress")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.age", value.isMember("age")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.rloc16", value.isMember("rloc16")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NeighborTable.linkFrameCounter", value.isMember("linkFrameCounter")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.mleFrameCounter", value.isMember("mleFrameCounter")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.lqi", value.isMember("lqi")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.averageRssi", value.isMember("averageRssi")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.lastRssi", value.isMember("lastRssi")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.frameErrorRate", value.isMember("frameErrorRate")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NeighborTable.messageErrorRate", value.isMember("messageErrorRate")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.rxOnWhenIdle", value.isMember("rxOnWhenIdle")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NeighborTable.fullThreadDevice", value.isMember("fullThreadDevice")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.fullNetworkData", value.isMember("fullNetworkData")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NeighborTable.isChild", value.isMember("isChild")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "extAddress");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.extAddress, value["extAddress"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "age");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.age, value["age"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rloc16");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rloc16, value["rloc16"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "linkFrameCounter");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.linkFrameCounter, value["linkFrameCounter"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "mleFrameCounter");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.mleFrameCounter, value["mleFrameCounter"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "lqi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.lqi, value["lqi"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "averageRssi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.averageRssi, value["averageRssi"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "lastRssi");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.lastRssi, value["lastRssi"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "frameErrorRate");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.frameErrorRate, value["frameErrorRate"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "messageErrorRate");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.messageErrorRate, value["messageErrorRate"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rxOnWhenIdle");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rxOnWhenIdle, value["rxOnWhenIdle"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fullThreadDevice");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fullThreadDevice, value["fullThreadDevice"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fullNetworkData");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fullNetworkData, value["fullNetworkData"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "isChild");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.isChild, value["isChild"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ThreadNetworkDiagnostics::Structs::NeighborTable::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.extAddress);
        RequestEncoder::FinalizeRequest(request.age);
        RequestEncoder::FinalizeRequest(request.rloc16);
        RequestEncoder::FinalizeRequest(request.linkFrameCounter);
        RequestEncoder::FinalizeRequest(request.mleFrameCounter);
        RequestEncoder::FinalizeRequest(request.lqi);
        RequestEncoder::FinalizeRequest(request.averageRssi);
        RequestEncoder::FinalizeRequest(request.lastRssi);
        RequestEncoder::FinalizeRequest(request.frameErrorRate);
        RequestEncoder::FinalizeRequest(request.messageErrorRate);
        RequestEncoder::FinalizeRequest(request.rxOnWhenIdle);
        RequestEncoder::FinalizeRequest(request.fullThreadDevice);
        RequestEncoder::FinalizeRequest(request.fullNetworkData);
        RequestEncoder::FinalizeRequest(request.isChild);
    }
    static CHIP_ERROR
    PrepareRequest(const char * label,
                   chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::Type & request,
                   Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.activeTimestampPresent",
                                                               value.isMember("activeTimestampPresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.pendingTimestampPresent",
                                                               value.isMember("pendingTimestampPresent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.masterKeyPresent", value.isMember("masterKeyPresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.networkNamePresent",
                                                               value.isMember("networkNamePresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.extendedPanIdPresent",
                                                               value.isMember("extendedPanIdPresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.meshLocalPrefixPresent",
                                                               value.isMember("meshLocalPrefixPresent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.delayPresent", value.isMember("delayPresent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.panIdPresent", value.isMember("panIdPresent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.channelPresent", value.isMember("channelPresent")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.pskcPresent", value.isMember("pskcPresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.securityPolicyPresent",
                                                               value.isMember("securityPolicyPresent")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OperationalDatasetComponents.channelMaskPresent",
                                                               value.isMember("channelMaskPresent")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "activeTimestampPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.activeTimestampPresent, value["activeTimestampPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "pendingTimestampPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.pendingTimestampPresent, value["pendingTimestampPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "masterKeyPresent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.masterKeyPresent, value["masterKeyPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "networkNamePresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.networkNamePresent, value["networkNamePresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "extendedPanIdPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.extendedPanIdPresent, value["extendedPanIdPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "meshLocalPrefixPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.meshLocalPrefixPresent, value["meshLocalPrefixPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "delayPresent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.delayPresent, value["delayPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "panIdPresent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.panIdPresent, value["panIdPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "channelPresent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.channelPresent, value["channelPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "pskcPresent");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.pskcPresent, value["pskcPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "securityPolicyPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.securityPolicyPresent, value["securityPolicyPresent"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "channelMaskPresent");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.channelMaskPresent, value["channelMaskPresent"]));

        return CHIP_NO_ERROR;
    }

    static void
    FinalizeRequest(chip::app::Clusters::ThreadNetworkDiagnostics::Structs::OperationalDatasetComponents::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.activeTimestampPresent);
        RequestEncoder::FinalizeRequest(request.pendingTimestampPresent);
        RequestEncoder::FinalizeRequest(request.masterKeyPresent);
        RequestEncoder::FinalizeRequest(request.networkNamePresent);
        RequestEncoder::FinalizeRequest(request.extendedPanIdPresent);
        RequestEncoder::FinalizeRequest(request.meshLocalPrefixPresent);
        RequestEncoder::FinalizeRequest(request.delayPresent);
        RequestEncoder::FinalizeRequest(request.panIdPresent);
        RequestEncoder::FinalizeRequest(request.channelPresent);
        RequestEncoder::FinalizeRequest(request.pskcPresent);
        RequestEncoder::FinalizeRequest(request.securityPolicyPresent);
        RequestEncoder::FinalizeRequest(request.channelMaskPresent);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.extAddress", value.isMember("extAddress")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.rloc16", value.isMember("rloc16")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.routerId", value.isMember("routerId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.nextHop", value.isMember("nextHop")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.pathCost", value.isMember("pathCost")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.LQIIn", value.isMember("LQIIn")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.LQIOut", value.isMember("LQIOut")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.age", value.isMember("age")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.allocated", value.isMember("allocated")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("RouteTable.linkEstablished", value.isMember("linkEstablished")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "extAddress");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.extAddress, value["extAddress"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rloc16");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rloc16, value["rloc16"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "routerId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.routerId, value["routerId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nextHop");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nextHop, value["nextHop"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "pathCost");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.pathCost, value["pathCost"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "LQIIn");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.LQIIn, value["LQIIn"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "LQIOut");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.LQIOut, value["LQIOut"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "age");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.age, value["age"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "allocated");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.allocated, value["allocated"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "linkEstablished");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.linkEstablished, value["linkEstablished"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ThreadNetworkDiagnostics::Structs::RouteTable::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.extAddress);
        RequestEncoder::FinalizeRequest(request.rloc16);
        RequestEncoder::FinalizeRequest(request.routerId);
        RequestEncoder::FinalizeRequest(request.nextHop);
        RequestEncoder::FinalizeRequest(request.pathCost);
        RequestEncoder::FinalizeRequest(request.LQIIn);
        RequestEncoder::FinalizeRequest(request.LQIOut);
        RequestEncoder::FinalizeRequest(request.age);
        RequestEncoder::FinalizeRequest(request.allocated);
        RequestEncoder::FinalizeRequest(request.linkEstablished);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SecurityPolicy.rotationTime", value.isMember("rotationTime")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SecurityPolicy.flags", value.isMember("flags")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rotationTime");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rotationTime, value["rotationTime"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "flags");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.flags, value["flags"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ThreadNetworkDiagnostics::Structs::SecurityPolicy::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.rotationTime);
        RequestEncoder::FinalizeRequest(request.flags);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.rootPublicKey", value.isMember("rootPublicKey")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.vendorId", value.isMember("vendorId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.fabricId", value.isMember("fabricId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.nodeId", value.isMember("nodeId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("FabricDescriptor.label", value.isMember("label")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "rootPublicKey");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.rootPublicKey, value["rootPublicKey"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "vendorId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.vendorId, value["vendorId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricId, value["fabricId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nodeId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nodeId, value["nodeId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "label");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.label, value["label"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::OperationalCredentials::Structs::FabricDescriptor::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.rootPublicKey);
        RequestEncoder::FinalizeRequest(request.vendorId);
        RequestEncoder::FinalizeRequest(request.fabricId);
        RequestEncoder::FinalizeRequest(request.nodeId);
        RequestEncoder::FinalizeRequest(request.label);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NOCStruct.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NOCStruct.noc", value.isMember("noc")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "noc");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.noc, value["noc"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::OperationalCredentials::Structs::NOCStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.noc);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::GroupKeyManagement::Structs::GroupInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupInfo.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupInfo.groupId", value.isMember("groupId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupInfo.endpoints", value.isMember("endpoints")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupInfo.groupName", value.isMember("groupName")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "groupId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.groupId, value["groupId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpoints");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpoints, value["endpoints"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "groupName");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.groupName, value["groupName"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::GroupKeyManagement::Structs::GroupInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.groupId);
        RequestEncoder::FinalizeRequest(request.endpoints);
        RequestEncoder::FinalizeRequest(request.groupName);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKey.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKey.groupId", value.isMember("groupId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKey.groupKeySetID", value.isMember("groupKeySetID")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "groupId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.groupId, value["groupId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "groupKeySetID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.groupKeySetID, value["groupKeySetID"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::GroupKeyManagement::Structs::GroupKey::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.groupId);
        RequestEncoder::FinalizeRequest(request.groupKeySetID);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::GroupKeyManagement::Structs::GroupKeySet::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.groupKeySetID", value.isMember("groupKeySetID")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.securityPolicy", value.isMember("securityPolicy")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochKey0", value.isMember("epochKey0")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochStartTime0", value.isMember("epochStartTime0")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochKey1", value.isMember("epochKey1")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochStartTime1", value.isMember("epochStartTime1")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochKey2", value.isMember("epochKey2")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("GroupKeySet.epochStartTime2", value.isMember("epochStartTime2")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "groupKeySetID");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.groupKeySetID, value["groupKeySetID"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "securityPolicy");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.securityPolicy, value["securityPolicy"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochKey0");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochKey0, value["epochKey0"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochStartTime0");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochStartTime0, value["epochStartTime0"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochKey1");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochKey1, value["epochKey1"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochStartTime1");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochStartTime1, value["epochStartTime1"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochKey2");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochKey2, value["epochKey2"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "epochStartTime2");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.epochStartTime2, value["epochStartTime2"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::GroupKeyManagement::Structs::GroupKeySet::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.groupKeySetID);
        RequestEncoder::FinalizeRequest(request.securityPolicy);
        RequestEncoder::FinalizeRequest(request.epochKey0);
        RequestEncoder::FinalizeRequest(request.epochStartTime0);
        RequestEncoder::FinalizeRequest(request.epochKey1);
        RequestEncoder::FinalizeRequest(request.epochStartTime1);
        RequestEncoder::FinalizeRequest(request.epochKey2);
        RequestEncoder::FinalizeRequest(request.epochStartTime2);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ModeOptionStruct.label", value.isMember("label")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ModeOptionStruct.mode", value.isMember("mode")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ModeOptionStruct.semanticTag", value.isMember("semanticTag")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "label");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.label, value["label"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "mode");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.mode, value["mode"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "semanticTag");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.semanticTag, value["semanticTag"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ModeSelect::Structs::ModeOptionStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.label);
        RequestEncoder::FinalizeRequest(request.mode);
        RequestEncoder::FinalizeRequest(request.semanticTag);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::ModeSelect::Structs::SemanticTag::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SemanticTag.mfgCode", value.isMember("mfgCode")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SemanticTag.value", value.isMember("value")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "mfgCode");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.mfgCode, value["mfgCode"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "value");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.value, value["value"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ModeSelect::Structs::SemanticTag::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.mfgCode);
        RequestEncoder::FinalizeRequest(request.value);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::DoorLock::Structs::DlCredential::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("DlCredential.credentialType", value.isMember("credentialType")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("DlCredential.credentialIndex", value.isMember("credentialIndex")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "credentialType");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.credentialType, value["credentialType"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "credentialIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.credentialIndex, value["credentialIndex"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::DoorLock::Structs::DlCredential::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.credentialType);
        RequestEncoder::FinalizeRequest(request.credentialIndex);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::IasAce::Structs::IasAceZoneStatusResult::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("IasAceZoneStatusResult.zoneId", value.isMember("zoneId")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("IasAceZoneStatusResult.zoneStatus", value.isMember("zoneStatus")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "zoneId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.zoneId, value["zoneId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "zoneStatus");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.zoneStatus, value["zoneStatus"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::IasAce::Structs::IasAceZoneStatusResult::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.zoneId);
        RequestEncoder::FinalizeRequest(request.zoneStatus);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::Channel::Structs::ChannelInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ChannelInfo.majorNumber", value.isMember("majorNumber")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ChannelInfo.minorNumber", value.isMember("minorNumber")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ChannelInfo.name", value.isMember("name")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ChannelInfo.callSign", value.isMember("callSign")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ChannelInfo.affiliateCallSign", value.isMember("affiliateCallSign")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "majorNumber");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.majorNumber, value["majorNumber"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "minorNumber");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.minorNumber, value["minorNumber"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "callSign");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.callSign, value["callSign"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "affiliateCallSign");
        ReturnErrorOnFailure(
            RequestEncoder::PrepareRequest(labelWithMember, request.affiliateCallSign, value["affiliateCallSign"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::Channel::Structs::ChannelInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.majorNumber);
        RequestEncoder::FinalizeRequest(request.minorNumber);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.callSign);
        RequestEncoder::FinalizeRequest(request.affiliateCallSign);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::Channel::Structs::LineupInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LineupInfo.operatorName", value.isMember("operatorName")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LineupInfo.lineupName", value.isMember("lineupName")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LineupInfo.postalCode", value.isMember("postalCode")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("LineupInfo.lineupInfoType", value.isMember("lineupInfoType")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "operatorName");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.operatorName, value["operatorName"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "lineupName");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.lineupName, value["lineupName"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "postalCode");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.postalCode, value["postalCode"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "lineupInfoType");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.lineupInfoType, value["lineupInfoType"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::Channel::Structs::LineupInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.operatorName);
        RequestEncoder::FinalizeRequest(request.lineupName);
        RequestEncoder::FinalizeRequest(request.postalCode);
        RequestEncoder::FinalizeRequest(request.lineupInfoType);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::TargetNavigator::Structs::TargetInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TargetInfo.identifier", value.isMember("identifier")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TargetInfo.name", value.isMember("name")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "identifier");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.identifier, value["identifier"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TargetNavigator::Structs::TargetInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.identifier);
        RequestEncoder::FinalizeRequest(request.name);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::MediaPlayback::Structs::PlaybackPosition::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("PlaybackPosition.updatedAt", value.isMember("updatedAt")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("PlaybackPosition.position", value.isMember("position")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "updatedAt");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.updatedAt, value["updatedAt"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "position");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.position, value["position"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::MediaPlayback::Structs::PlaybackPosition::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.updatedAt);
        RequestEncoder::FinalizeRequest(request.position);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::MediaInput::Structs::InputInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("InputInfo.index", value.isMember("index")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("InputInfo.inputType", value.isMember("inputType")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("InputInfo.name", value.isMember("name")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("InputInfo.description", value.isMember("description")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "index");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.index, value["index"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "inputType");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.inputType, value["inputType"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "description");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.description, value["description"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::MediaInput::Structs::InputInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.index);
        RequestEncoder::FinalizeRequest(request.inputType);
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.description);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::ContentLauncher::Structs::Dimension::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Dimension.width", value.isMember("width")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Dimension.height", value.isMember("height")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Dimension.metric", value.isMember("metric")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "width");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.width, value["width"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "height");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.height, value["height"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "metric");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.metric, value["metric"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::Dimension::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.width);
        RequestEncoder::FinalizeRequest(request.height);
        RequestEncoder::FinalizeRequest(request.metric);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ContentLauncher::Structs::AdditionalInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AdditionalInfo.name", value.isMember("name")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("AdditionalInfo.value", value.isMember("value")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "value");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.value, value["value"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::AdditionalInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.name);
        RequestEncoder::FinalizeRequest(request.value);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::ContentLauncher::Structs::Parameter::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Parameter.type", value.isMember("type")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Parameter.value", value.isMember("value")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("Parameter.externalIDList", value.isMember("externalIDList")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "type");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.type, value["type"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "value");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.value, value["value"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "externalIDList");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.externalIDList, value["externalIDList"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::Parameter::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.type);
        RequestEncoder::FinalizeRequest(request.value);
        RequestEncoder::FinalizeRequest(request.externalIDList);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ContentLauncher::Structs::ContentSearch::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ContentSearch.parameterList", value.isMember("parameterList")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "parameterList");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.parameterList, value["parameterList"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::ContentSearch::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.parameterList);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ContentLauncher::Structs::StyleInformation::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("StyleInformation.imageUrl", value.isMember("imageUrl")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("StyleInformation.color", value.isMember("color")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("StyleInformation.size", value.isMember("size")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "imageUrl");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.imageUrl, value["imageUrl"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "color");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.color, value["color"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "size");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.size, value["size"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::StyleInformation::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.imageUrl);
        RequestEncoder::FinalizeRequest(request.color);
        RequestEncoder::FinalizeRequest(request.size);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ContentLauncher::Structs::BrandingInformation::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.providerName", value.isMember("providerName")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.background", value.isMember("background")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.logo", value.isMember("logo")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.progressBar", value.isMember("progressBar")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.splash", value.isMember("splash")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("BrandingInformation.waterMark", value.isMember("waterMark")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "providerName");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.providerName, value["providerName"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "background");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.background, value["background"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "logo");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.logo, value["logo"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "progressBar");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.progressBar, value["progressBar"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "splash");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.splash, value["splash"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "waterMark");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.waterMark, value["waterMark"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ContentLauncher::Structs::BrandingInformation::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.providerName);
        RequestEncoder::FinalizeRequest(request.background);
        RequestEncoder::FinalizeRequest(request.logo);
        RequestEncoder::FinalizeRequest(request.progressBar);
        RequestEncoder::FinalizeRequest(request.splash);
        RequestEncoder::FinalizeRequest(request.waterMark);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::AudioOutput::Structs::OutputInfo::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OutputInfo.index", value.isMember("index")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OutputInfo.outputType", value.isMember("outputType")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("OutputInfo.name", value.isMember("name")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "index");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.index, value["index"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "outputType");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.outputType, value["outputType"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "name");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.name, value["name"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::AudioOutput::Structs::OutputInfo::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.index);
        RequestEncoder::FinalizeRequest(request.outputType);
        RequestEncoder::FinalizeRequest(request.name);
    }
    static CHIP_ERROR
    PrepareRequest(const char * label,
                   chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::Type & request,
                   Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ApplicationLauncherApplication.catalogVendorId", value.isMember("catalogVendorId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ApplicationLauncherApplication.applicationId", value.isMember("applicationId")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "catalogVendorId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.catalogVendorId, value["catalogVendorId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "applicationId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.applicationId, value["applicationId"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ApplicationLauncher::Structs::ApplicationLauncherApplication::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.catalogVendorId);
        RequestEncoder::FinalizeRequest(request.applicationId);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEP::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ApplicationEP.application", value.isMember("application")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("ApplicationEP.endpoint", value.isMember("endpoint")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "application");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.application, value["application"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "endpoint");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.endpoint, value["endpoint"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ApplicationLauncher::Structs::ApplicationEP::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.application);
        RequestEncoder::FinalizeRequest(request.endpoint);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ApplicationBasicApplication.catalogVendorId", value.isMember("catalogVendorId")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("ApplicationBasicApplication.applicationId", value.isMember("applicationId")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "catalogVendorId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.catalogVendorId, value["catalogVendorId"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "applicationId");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.applicationId, value["applicationId"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.catalogVendorId);
        RequestEncoder::FinalizeRequest(request.applicationId);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.a", value.isMember("a")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.b", value.isMember("b")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.c", value.isMember("c")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.d", value.isMember("d")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.e", value.isMember("e")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.f", value.isMember("f")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.g", value.isMember("g")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("SimpleStruct.h", value.isMember("h")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "a");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.a, value["a"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "b");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.b, value["b"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "c");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.c, value["c"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "d");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.d, value["d"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "e");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.e, value["e"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "f");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.f, value["f"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "g");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.g, value["g"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "h");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.h, value["h"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.a);
        RequestEncoder::FinalizeRequest(request.b);
        RequestEncoder::FinalizeRequest(request.c);
        RequestEncoder::FinalizeRequest(request.d);
        RequestEncoder::FinalizeRequest(request.e);
        RequestEncoder::FinalizeRequest(request.f);
        RequestEncoder::FinalizeRequest(request.g);
        RequestEncoder::FinalizeRequest(request.h);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NullablesAndOptionalsStruct.nullableInt", value.isMember("nullableInt")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NullablesAndOptionalsStruct.nullableString", value.isMember("nullableString")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NullablesAndOptionalsStruct.nullableStruct", value.isMember("nullableStruct")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("NullablesAndOptionalsStruct.nullableList", value.isMember("nullableList")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableInt");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nullableInt, value["nullableInt"]));

        if (value.isMember("optionalInt"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "optionalInt");
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.optionalInt, value["optionalInt"]));
        }

        if (value.isMember("nullableOptionalInt"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableOptionalInt");
            ReturnErrorOnFailure(
                RequestEncoder::PrepareRequest(labelWithMember, request.nullableOptionalInt, value["nullableOptionalInt"]));
        }

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableString");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nullableString, value["nullableString"]));

        if (value.isMember("optionalString"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "optionalString");
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.optionalString, value["optionalString"]));
        }

        if (value.isMember("nullableOptionalString"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableOptionalString");
            ReturnErrorOnFailure(
                RequestEncoder::PrepareRequest(labelWithMember, request.nullableOptionalString, value["nullableOptionalString"]));
        }

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableStruct");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nullableStruct, value["nullableStruct"]));

        if (value.isMember("optionalStruct"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "optionalStruct");
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.optionalStruct, value["optionalStruct"]));
        }

        if (value.isMember("nullableOptionalStruct"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableOptionalStruct");
            ReturnErrorOnFailure(
                RequestEncoder::PrepareRequest(labelWithMember, request.nullableOptionalStruct, value["nullableOptionalStruct"]));
        }

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableList");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.nullableList, value["nullableList"]));

        if (value.isMember("optionalList"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "optionalList");
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.optionalList, value["optionalList"]));
        }

        if (value.isMember("nullableOptionalList"))
        {
            snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "nullableOptionalList");
            ReturnErrorOnFailure(
                RequestEncoder::PrepareRequest(labelWithMember, request.nullableOptionalList, value["nullableOptionalList"]));
        }

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.nullableInt);
        RequestEncoder::FinalizeRequest(request.optionalInt);
        RequestEncoder::FinalizeRequest(request.nullableOptionalInt);
        RequestEncoder::FinalizeRequest(request.nullableString);
        RequestEncoder::FinalizeRequest(request.optionalString);
        RequestEncoder::FinalizeRequest(request.nullableOptionalString);
        RequestEncoder::FinalizeRequest(request.nullableStruct);
        RequestEncoder::FinalizeRequest(request.optionalStruct);
        RequestEncoder::FinalizeRequest(request.nullableOptionalStruct);
        RequestEncoder::FinalizeRequest(request.nullableList);
        RequestEncoder::FinalizeRequest(request.optionalList);
        RequestEncoder::FinalizeRequest(request.nullableOptionalList);
    }
    static CHIP_ERROR PrepareRequest(const char * label, chip::app::Clusters::TestCluster::Structs::NestedStruct::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStruct.a", value.isMember("a")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStruct.b", value.isMember("b")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStruct.c", value.isMember("c")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "a");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.a, value["a"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "b");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.b, value["b"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "c");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.c, value["c"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::NestedStruct::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.a);
        RequestEncoder::FinalizeRequest(request.b);
        RequestEncoder::FinalizeRequest(request.c);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::TestCluster::Structs::NestedStructList::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.a", value.isMember("a")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.b", value.isMember("b")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.c", value.isMember("c")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.d", value.isMember("d")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.e", value.isMember("e")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.f", value.isMember("f")));
        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("NestedStructList.g", value.isMember("g")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "a");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.a, value["a"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "b");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.b, value["b"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "c");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.c, value["c"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "d");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.d, value["d"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "e");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.e, value["e"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "f");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.f, value["f"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "g");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.g, value["g"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::NestedStructList::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.a);
        RequestEncoder::FinalizeRequest(request.b);
        RequestEncoder::FinalizeRequest(request.c);
        RequestEncoder::FinalizeRequest(request.d);
        RequestEncoder::FinalizeRequest(request.e);
        RequestEncoder::FinalizeRequest(request.f);
        RequestEncoder::FinalizeRequest(request.g);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::TestCluster::Structs::DoubleNestedStructList::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("DoubleNestedStructList.a", value.isMember("a")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "a");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.a, value["a"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::DoubleNestedStructList::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.a);
    }
    static CHIP_ERROR PrepareRequest(const char * label,
                                     chip::app::Clusters::TestCluster::Structs::TestListStructOctet::Type & request,
                                     Json::Value & value)
    {
        VerifyOrReturnError(value.isObject(), CHIP_ERROR_INVALID_ARGUMENT);

        ReturnErrorOnFailure(RequestEncoder::EnsureMemberExist("TestListStructOctet.fabricIndex", value.isMember("fabricIndex")));
        ReturnErrorOnFailure(
            RequestEncoder::EnsureMemberExist("TestListStructOctet.operationalCert", value.isMember("operationalCert")));

        char labelWithMember[kMaxLabelLength];
        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "fabricIndex");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.fabricIndex, value["fabricIndex"]));

        snprintf(labelWithMember, sizeof(labelWithMember), "%s.%s", label, "operationalCert");
        ReturnErrorOnFailure(RequestEncoder::PrepareRequest(labelWithMember, request.operationalCert, value["operationalCert"]));

        return CHIP_NO_ERROR;
    }

    static void FinalizeRequest(chip::app::Clusters::TestCluster::Structs::TestListStructOctet::Type & request)
    {
        RequestEncoder::FinalizeRequest(request.fabricIndex);
        RequestEncoder::FinalizeRequest(request.operationalCert);
    }

    template <typename T>
    static void FinalizeRequest(T & request)
    {}

    template <typename T>
    static void FinalizeRequest(chip::Optional<T> & request)
    {
        if (request.HasValue())
        {
            RequestEncoder::FinalizeRequest(request.Value());
        }
    }

    template <typename T>
    static void FinalizeRequest(chip::app::DataModel::Nullable<T> & request)
    {
        if (!request.IsNull())
        {
            RequestEncoder::FinalizeRequest(request.Value());
        }
    }

    static void FinalizeRequest(chip::ByteSpan & request)
    {
        chip::Platform::MemoryFree(reinterpret_cast<void *>(const_cast<uint8_t *>(request.data())));
    }

    static void FinalizeRequest(chip::CharSpan & request)
    {
        chip::Platform::MemoryFree(reinterpret_cast<void *>(const_cast<char *>(request.data())));
    }

    template <typename T>
    static void FinalizeRequest(chip::app::DataModel::List<T> & request)
    {
        size_t size = request.size();
        auto data   = const_cast<typename std::remove_const<T>::type *>(request.data());
        for (size_t i = 0; i < size; i++)
        {
            FinalizeRequest(data[i]);
        }

        chip::Platform::MemoryFree(reinterpret_cast<void *>(data));
    }
};

CHIP_ERROR JSONAttributeWriter::WriteAttribute(chip::OperationalDeviceProxy * device, chip::EndpointId endpointId,
                                               chip::ClusterId clusterId, chip::AttributeId attributeId, Json::Value & value)
{
    using namespace chip::app::Clusters;

    switch (clusterId)
    {
    case AccessControl::Id: {
        switch (attributeId)
        {
        case AccessControl::Attributes::Acl::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::AccessControlEntry::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("Acl", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case AccessControl::Attributes::Extension::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::AccessControl::Structs::ExtensionEntry::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("Extension", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }

        default:
            return CHIP_ERROR_INVALID_ARGUMENT;
        }
        break;
    }
    case ApplicationBasic::Id: {
        switch (attributeId)
        {
        case ApplicationBasic::Attributes::ApplicationApp::Id: {
            chip::app::Clusters::ApplicationBasic::Structs::ApplicationBasicApplication::Type request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("ApplicationApp", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }

        default:
            return CHIP_ERROR_INVALID_ARGUMENT;
        }
        break;
    }
    case OtaSoftwareUpdateRequestor::Id: {
        switch (attributeId)
        {
        case OtaSoftwareUpdateRequestor::Attributes::DefaultOtaProviders::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::OtaSoftwareUpdateRequestor::Structs::ProviderLocation::Type>
                request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("DefaultOtaProviders", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }

        default:
            return CHIP_ERROR_INVALID_ARGUMENT;
        }
        break;
    }
    case TestCluster::Id: {
        switch (attributeId)
        {
        case TestCluster::Attributes::ListInt8u::Id: {
            chip::app::DataModel::List<const uint8_t> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("ListInt8u", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case TestCluster::Attributes::ListOctetString::Id: {
            chip::app::DataModel::List<const chip::ByteSpan> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("ListOctetString", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case TestCluster::Attributes::ListStructOctetString::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::TestListStructOctet::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("ListStructOctetString", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case TestCluster::Attributes::ListNullablesAndOptionalsStruct::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::TestCluster::Structs::NullablesAndOptionalsStruct::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("ListNullablesAndOptionalsStruct", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case TestCluster::Attributes::StructAttr::Id: {
            chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("StructAttr", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }
        case TestCluster::Attributes::NullableStruct::Id: {
            chip::app::DataModel::Nullable<chip::app::Clusters::TestCluster::Structs::SimpleStruct::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("NullableStruct", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }

        default:
            return CHIP_ERROR_INVALID_ARGUMENT;
        }
        break;
    }
    case UserLabel::Id: {
        switch (attributeId)
        {
        case UserLabel::Attributes::LabelList::Id: {
            chip::app::DataModel::List<const chip::app::Clusters::UserLabel::Structs::LabelStruct::Type> request;
            ReturnErrorOnFailure(RequestEncoder::PrepareRequest("LabelList", request, value));
            ReturnErrorOnFailure(mCommand->WriteAttribute(device, endpointId, clusterId, attributeId, request));
            RequestEncoder::FinalizeRequest(request);
            break;
        }

        default:
            return CHIP_ERROR_INVALID_ARGUMENT;
        }
        break;
    }

    default:
        return CHIP_ERROR_INVALID_ARGUMENT;
    }

    return CHIP_NO_ERROR;
}
