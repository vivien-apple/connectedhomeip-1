{{> header}}

#pragma once

#include "ModelCommand.h"
#include <controller/CHIPClusters.h>

{{> clusters_header}}

{{#chip_clusters}}
constexpr chip::ClusterId k{{asCamelCased name false}}ClusterId = {{asHex code 4}};
{{/chip_clusters}}

{{#chip_clusters}}
{{> cluster_header}}

{{#chip_server_cluster_commands}}
/*
 * Command {{asCamelCased name false}}
 */
class {{asCamelCased clusterName false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    {{asCamelCased clusterName false}}{{asCamelCased name false}}(): ModelCommand("{{asDelimitedCommand name}}")
    {
        {{#chip_server_cluster_command_arguments}}
        {{#if (isString type)}}
        AddArgument("{{asCamelCased label}}", &m{{asCamelCased label false}});
        {{else}}
        AddArgument("{{asCamelCased label}}", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &m{{asCamelCased label false}});
        {{/if}}
        {{/chip_server_cluster_command_arguments}}
        ModelCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command ({{asHex code 2}}) on endpoint %" PRIu16, endpointId);
        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.{{asCamelCased name false}}(nullptr{{#chip_server_cluster_command_arguments}}, m{{asCamelCased label false}}{{/chip_server_cluster_command_arguments}});
    }
    {{#chip_server_cluster_command_arguments}}
    {{#first}}

private:
    {{/first}}
    {{#if (isString type)}}
    char * m{{asCamelCased label false}};
    {{else}}
    {{chipType}} m{{asCamelCased label false}};
    {{/if}}
    {{/chip_server_cluster_command_arguments}}
};

{{/chip_server_cluster_commands}}

/*
 * Discover Attributes
 */
class Discover{{asCamelCased name false}}Attributes: public ModelCommand
{
public:
    Discover{{asCamelCased name false}}Attributes(): ModelCommand("discover")
    {
        ModelCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x0C) on endpoint %" PRIu16, endpointId);
        chip::Controller::{{asCamelCased name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.DiscoverAttributes(nullptr);
    }
};

{{#chip_server_cluster_attributes}}
/*
 * Attribute {{asCamelCased name false}}
 */
class Read{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Read{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("read")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        ModelCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x00) on endpoint %" PRIu16, endpointId);
        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.ReadAttribute{{asCamelCased name false}}(nullptr);
    }
};

{{#if (isWritableAttribute)}}
class Write{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Write{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("write")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        AddArgument("attr-value", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &mValue);
        ModelCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x01) on endpoint %" PRIu16, endpointId);
        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.WriteAttribute{{asCamelCased name false}}(nullptr, mValue);
    }

private:
    {{chipType}} mValue;
};

{{/if}}
{{#if (isReportableAttribute)}}
class Report{{asCamelCased parent.name false}}{{asCamelCased name false}}: public ModelCommand
{
public:
    Report{{asCamelCased parent.name false}}{{asCamelCased name false}}(): ModelCommand("report")
    {
        AddArgument("attr-name", "{{asDelimitedCommand (asCamelCased name)}}");
        AddArgument("min-interval", 0, UINT16_MAX, &mMinInterval);
        AddArgument("max-interval", 0, UINT16_MAX, &mMaxInterval);
        {{#unless (isDiscreteType)}}
        AddArgument("change", {{asTypeMinValue type}}, {{asTypeMaxValue type}}, &mChange);
        {{/unless}}
        ModelCommand::AddArguments();
    }

    CHIP_ERROR SendCommand(ChipDevice * device, uint8_t endpointId) override
    {
        ChipLogProgress(chipTool, "Sending cluster ({{asHex parent.code 4}}) command (0x06) on endpoint %" PRIu16, endpointId);
        chip::Controller::{{asCamelCased parent.name false}}Cluster cluster;
        cluster.Associate(device, endpointId);
        return cluster.ReportAttribute{{asCamelCased name false}}(nullptr, nullptr, mMinInterval, mMaxInterval{{#unless (isDiscreteType)}}, mChange{{/unless}});
    }

private:
    uint16_t mMinInterval;
    uint16_t mMaxInterval;
    {{#unless (isDiscreteType)}}
    {{chipType}} mChange;
    {{/unless}}
};

{{/if}}
{{/chip_server_cluster_attributes}}
{{/chip_clusters}}

/*----------------------------------------------------------------------------*\
| Register all Clusters commands                                               |
\*----------------------------------------------------------------------------*/
{{#chip_clusters}}
void registerCluster{{asCamelCased name false}}(Commands & commands)
{
    const char * clusterName = "{{asCamelCased name false}}";

    commands_list clusterCommands = {
        {{#chip_server_cluster_commands}}
        make_unique<{{asCamelCased clusterName false}}{{asCamelCased name false}}>(),
        {{/chip_server_cluster_commands}}
        make_unique<Discover{{asCamelCased name false}}Attributes>(),
        {{#chip_server_cluster_attributes}}
        make_unique<Read{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{#if (isWritableAttribute)}}
        make_unique<Write{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{/if}}
        {{#if (isReportableAttribute)}}
        make_unique<Report{{asCamelCased parent.name false}}{{asCamelCased name false}}>(),
        {{/if}}
        {{/chip_server_cluster_attributes}}
    };

    commands.Register(clusterName, clusterCommands);
}
{{/chip_clusters}}

void registerClusters(Commands & commands)
{
{{#chip_clusters}}
    registerCluster{{asCamelCased name false}}(commands);
{{/chip_clusters}}
}
