{{#if hasExpectedConstraints}}
    {{#if isOptional}}
        VerifyOrReturn(CheckValuePresent("{{asRootObject forceNotOptional=true}}", {{asRootObject forceNotOptional=true}}));
    {{/if}}

    {{~#if (hasProperty expectedConstraints "type")}}VerifyOrReturn(CheckConstraintType("{{asRootObject}}", "", "{{expectedConstraints.type}}"));{{/if}}

    {{~#if (hasProperty expectedConstraints "format")}}VerifyOrReturn(CheckConstraintFormat("{{asRootObject}}", "", "{{expectedConstraints.format}}"));{{/if}}

    {{~#if (hasProperty expectedConstraints "startsWith")}}VerifyOrReturn(CheckConstraintStartsWith("{{asRootObject}}", {{asRootObject}}, "{{expectedConstraints.startsWith}}"));{{/if}}

    {{~#if (hasProperty expectedConstraints "endsWith")}}VerifyOrReturn(CheckConstraintEndsWith("{{asRootObject}}", {{asRootObject}}, "{{expectedConstraints.endsWith}}"));{{/if}}

    {{~#if (hasProperty expectedConstraints "isUpperCase")}}VerifyOrReturn(CheckConstraintIsUpperCase("{{asRootObject}}", {{asRootObject}}, {{expectedConstraints.isUpperCase}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "isLowerCase")}}VerifyOrReturn(CheckConstraintIsLowerCase("{{asRootObject}}", {{asRootObject}}, {{expectedConstraints.isLowerCase}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "isHexString")}}VerifyOrReturn(CheckConstraintIsHexString("{{asRootObject}}", {{asRootObject}}, {{expectedConstraints.isHexString}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "minLength")}}VerifyOrReturn(CheckConstraintMinLength("{{asRootObject}}", {{asRootObject}}.size(), {{expectedConstraints.minLength}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "maxLength")}}VerifyOrReturn(CheckConstraintMaxLength("{{asRootObject}}", {{asRootObject}}.size(), {{expectedConstraints.maxLength}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "minValue")}}VerifyOrReturn(CheckConstraintMinValue<{{chipType}}>("{{asRootObject}}", {{asRootObject}}, {{asTypedLiteral expectedConstraints.minValue type}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "maxValue")}}VerifyOrReturn(CheckConstraintMaxValue<{{chipType}}>("{{asRootObject}}", {{asRootObject}}, {{asTypedLiteral expectedConstraints.maxValue type}}));{{/if}}

    {{~#if (hasProperty expectedConstraints "notValue")}}
        {{#if (isLiteralNull expectedConstraints.notValue)}}
            VerifyOrReturn(CheckValueNonNull("{{asRootObject}}", {{asRootObject}}));
        {{else}}
            VerifyOrReturn(CheckConstraintNotValue("{{asRootObject}}", {{asRootObject}}, {{asTypedLiteral expectedConstraints.notValue type}}));
        {{/if}}
    {{/if}}
{{/if}}

